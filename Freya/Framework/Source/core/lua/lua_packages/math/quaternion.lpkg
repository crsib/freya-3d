$#include "math/quaternion.hpp"

namespace math {

class quaternion
{
	float x;
	float y;
	float z;
	float w;
	
	quaternion();
	~quaternion();

	quaternion& normalize();
	quaternion&	inverse();
	quaternion& conjugate();

	vector3d	rotate( vector3d& v) ;

	quaternion	operator + () ;
	quaternion  operator - () ;

	quaternion  operator + ( quaternion& q) ;
	quaternion  operator - ( quaternion& q) ;

	quaternion  operator * ( quaternion& q) ;
	quaternion 	operator * ( vector3d& v) ;

	operator    vector3d() ;


};

$[
math.quaternion.create = function (self)
	local cobj = math.quaternion.new()
 	cobj.x = self.x or 0
 	cobj.y = self.y or 0
 	cobj.z = self.z or 0
 	cobj.w = self.w or 0
 	return cobj
end
$]
	
	quaternion  inversed @ inversed_q( quaternion& q);

	quaternion  conjugated( quaternion& q);
	
	float 		abs @ abs_q( quaternion& q);

	float 		abs_sq @ abs_sq_q( quaternion& q);

	quaternion	normalized @ normalized_q( quaternion& q);

}
