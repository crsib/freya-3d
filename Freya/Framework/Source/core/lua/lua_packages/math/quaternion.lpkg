$#include "math/quaternion.hpp"

namespace math {

class quaternion
{
	
	quaternion();
	quaternion(const float x,const float y,const float z,const float w);
	quaternion(const float w, const vector3d& vec);
	quaternion(const vector3d& v);

	quaternion(const quaternion& q);
	quaternion& operator = (const quaternion& q);

	quaternion	rotationQuat(const float angle, const vector3d& axis);

	quaternion& normalize();
	quaternion&	inverse();
	quaternion& conjugate();

	vector3d	rotate(const vector3d& v) const;

	quaternion	operator + () const;
	quaternion  operator - () const;

	quaternion  operator + (const quaternion& q) const;
	quaternion  operator - (const quaternion& q) const;

	quaternion  operator * (const quaternion& q) const;
	quaternion 	operator * (const vector3d& v) const;

	operator    vector3d() const;

	quaternion&	operator+= (const quaternion& q);
	quaternion&	operator-= (const quaternion& q);

	quaternion&	operator*= (const quaternion& q);
	quaternion&	operator*= (const vector3d& v);

	quaternion  operator * (const float f) const;
	quaternion  operator / (const float f) const;

	quaternion&	operator*= (const float f);
	quaternion& operator/= (const float f);

};

	
	quaternion  inversed @ inversed_q(const quaternion& q);

	quaternion  conjugated(const quaternion& q);
	
	float 		abs @ abs_q(const quaternion& q);

	float 		abs_sq @ abs_sq_q(const quaternion& q);

	quaternion	normalized @ normalized_q(const quaternion& q);

	std::ostream& operator << (std::ostream& s,const quaternion& q);

}
