$#include "math/vector3d.hpp"

namespace math {

class vector3d
{
	float x;
	float y;
	float z;
	 
	const vector3d i;
	const vector3d j;
	const vector3d k;
	
	vector3d();
	~vector3d();
	//!Copy ructor
//	vector3d( vector3d& v);

//	vector3d( float x,  float y,  float z);

	//!Unary -
	vector3d	operator - () ;

	//!binary operator +
	vector3d	operator + ( vector3d& v) ;
	//! Binary -
	vector3d	operator - ( vector3d& v) ;
	//! Float multiply
	vector3d	operator * ( float f) ;
	//! Float division
	vector3d	operator / ( float f) ;
	//! Cross product (strictly defined only for 3D vectors. Defined as outer product for higher dimension, thus, defined only for vector3d)
	vector3d	operator * ( vector3d& v) ;

	vector3d&	normalize ();
    
};

$[
math.vector3d.create = function (self)
	local cobj = math.vector3d:new()
 	cobj.x = self.x or 0
 	cobj.y = self.y or 0
 	cobj.z = self.z or 0
 	return cobj
end
$]
	//External operators and functions
	//! Magnitude (or absolute) value
		float	abs @ abs_v3d( vector3d& v);
	//! Square of magnitude
	  float	abs_sq @ abs_sq_v3d( vector3d& v);
	//! Normalized version of vector
	 vector3d normalized @ normalized_v3d( vector3d& v);
           
}//math

