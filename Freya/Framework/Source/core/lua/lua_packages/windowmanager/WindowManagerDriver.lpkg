$#include "windowmanager/WindowManagerDriver.h"


namespace windowmanager
{

struct	DisplayMode
{
	unsigned width;
	//! height of a display
	unsigned height;
	//! Refresh rate
	unsigned refreshRate;
	//! Driver specific ID
	unsigned id;
};

struct WindowFormat
{
	WindowFormat();
	~WindowFormat();

	//! Size of red component in bits. (default is 8)
	int				RedSize;
	//! Size of green component in bits. (default is 8)
	int				GreenSize;
	//! Size of blue component in bits. (default is 8)
	int				BlueSize;
	//! Size of alpha channel in bits. (default is 8)
	int 			AlphaSize;
	//! Size of color buffer in bits. Normally equals to sum of rgba components. (default is 32)
	int				BufferSize;
	//! Size of depth buffer in bits. (default is 24)
	int				DepthSize;
	//! Size of stencil size		  (default is 8)
	int				StencilSize;
	//! true if context must have 3D acceleration (default is true)
	bool			Accelerated;
	//! true if context is double buffered (default is true)
	bool			Doublebuffered;
	//! true if vsync is needed (this option does not garantee either enabling or disabling of vsync) (default is false)
	bool			VSync;
	//! true if window is multisampled (default is false)
	bool			Multisampled;
	//! number of samples for MSAA     (default is 1)
	int				MultisampleSamples;


};

namespace EventType
{
enum
{
	QUIT,
	USER_EVENT
};
}

namespace ProcessingMode
{
enum
{
	NORMAL,
	EVENT_BASED
};
}

class WindowManagerDriver 
{
public:
	EString		id() const ;
	//Window part
	//! Sets the window size for windowed mode
	void		setWindowedModeWindowSize(unsigned width,unsigned height) ;
	//! Sets the window caption
	void 		setCaption(const EString& caption) ;
	//! Sets the desired window format. This will affect only for windows created after format is set
	void		setWindowFormat(WindowFormat*	fmt) ;
	//! Returns the number of display modes for full screen
	unsigned	getSupportedModesNumber()			=  0;
	//! Returns the mode for id (0 < id < getSupportedModesNumber() )
	DisplayMode*getDisplayMode(unsigned id)			=  0;
	//! Set the fullscreen window mode
	void		setFullscreenWindowMode(DisplayMode* mode) ;
	void		setFullscreenWindowMode(unsigned id)	;
	//! Toggles fullscreen
	void		toggleFullscreen(bool fs) ;
	//! Creates window and initializes specified RAPI. Destroys API
	void		initWindow(renderer::RenderingAPIVersion*	API) ;
	//! Destroys window (does not destroys RAPIDriver)
	void		destroyWindow() ;

	unsigned	getWindowWidth() const ;
	unsigned	getWindowHeight() const ;
	//Time
	unsigned	getTickCount() ;
	//Input
	windowmanager::input::KeyDrivenDevice*		createKeyDrivenDevice(const EString& type) ;
	windowmanager::input::MovementDrivenDevice*	createMovementDrivenDevice(const EString& type) ;

	void					destroyKeyDrivenDevice(windowmanager::input::KeyDrivenDevice* dev) ;
	void					destroyMovementDrivenDevice(windowmanager::input::MovementDrivenDevice* dev) ;
	//!Events updating and processing
	void		updateEvents() ;
	//! Set call back for quit event. No parameters passed
	void		setQuitCallback(const Callback& callback) ;
	//! Set the mouse wheel callback. p1 is int and represents a mouse. p2 is int and represents an event value
	void		setMouseWheelCallback(const Callback& callback) ;
	//Sets the mode for whole device.
	//For keydriven devices it is available to set individual callbacks for keys
	//For undestardable reason, its no efficient way to make the movement based actions to send messages only in specicified areas.
	//(Actually, resulting speed will be the same)
	void		setKeydrivenDeviceMode(unsigned mode) ;
	void		setMovementDrivenDevice(unsigned mode) ;
	//This function will post a user event
	void		postUserEvent(unsigned uid, void* arg1, void* arg2) ;
	//WM
	void		grabInput(bool grab_state) ;
	void		showCursor(bool show_state) ;
	void		swapBuffers() ;
};

}