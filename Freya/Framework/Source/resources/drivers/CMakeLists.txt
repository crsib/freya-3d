# plugins

INCLUDE_DIRECTORIES ( ../.. )

SET(RESOURCE_PLUGINS_ADDITIONAL_SOURCES

)

IF(BUILD_TGA_DRIVER) 
	
	SET(TGA_DRIVER_SOURCE
		TGADriver.h
		TGADriver.cpp
	)
	
	
	IF(BUILD_SHARED_TGA_DRIVER)
		MESSAGE("Building shared ")
		ADD_DEFINITIONS(-D_FREYA_SHARED_PLUGIN)
		ADD_LIBRARY( TGADriver MODULE ${TGA_DRIVER_SOURCE} TGADriverSharedBuild.cpp )
		TARGET_LINK_LIBRARIES( TGADriver ${GLOBAL_LINK_LIBRARIES} FreyaCore)
		SET_TARGET_PROPERTIES ( TGADriver PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/Plugins
														LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}/Plugins
														LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}/Plugins
														LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL}/Plugins
														LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO}/Plugins)
		AddPlugin( TGADriver )
	ELSE(BUILD_SHARED_TGA_DRIVER)
		ADD_LIBRARY( TGADriver STATIC ${TGA_DRIVER_SOURCE} TGADriverStaticBuild.cpp )
		SET( FREYA_CORE_LINK_LIBRARIES ${FREYA_CORE_LINK_LIBRARIES} TGADriver )
		SET_PROPERTY( GLOBAL PROPERTY FREYA_CORE_LINK_LIBRARIES_GLOBAL ${FREYA_CORE_LINK_LIBRARIES})
		AddResourcePlugin( TGADriver )
	ENDIF(BUILD_SHARED_TGA_DRIVER)
ENDIF(BUILD_TGA_DRIVER)

IF(BUILD_DDS_DRIVER) 
	
	SET(DDS_DRIVER_SOURCE
		DDSDriver.h
		DDSDriver.cpp
		DDSDriverInternal.h
		DDSDriverInternal.cpp
	)
	
	
	IF(BUILD_SHARED_DDS_DRIVER)
		MESSAGE("Building shared ")
		ADD_DEFINITIONS(-D_FREYA_SHARED_PLUGIN)
		ADD_LIBRARY( DDSDriver MODULE ${DDS_DRIVER_SOURCE} DDSDriverSharedBuild.cpp ${RESOURCE_PLUGINS_ADDITIONAL_SOURCES})
		TARGET_LINK_LIBRARIES( DDSDriver ${GLOBAL_LINK_LIBRARIES} FreyaCore )
		SET_TARGET_PROPERTIES ( DDSDriver PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/Plugins
														LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}/Plugins
														LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}/Plugins
														LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL}/Plugins
														LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO}/Plugins)
		AddPlugin( DDSDriver )
	ELSE(BUILD_SHARED_DDS_DRIVER)
		ADD_LIBRARY( DDSDriver STATIC ${DDS_DRIVER_SOURCE} DDSDriverStaticBuild.cpp)
		SET( FREYA_CORE_LINK_LIBRARIES ${FREYA_CORE_LINK_LIBRARIES} DDSDriver )
		SET_PROPERTY( GLOBAL PROPERTY FREYA_CORE_LINK_LIBRARIES_GLOBAL ${FREYA_CORE_LINK_LIBRARIES})
		AddResourcePlugin ( DDSDriver )
	ENDIF(BUILD_SHARED_DDS_DRIVER)
ENDIF(BUILD_DDS_DRIVER)

IF(BUILD_PNG_DRIVER)
	SET(PNG_DRIVER_SOURCE
		PNGDriver.h
		PNGDriver.cpp
		PNGLoader.h
		PNGLoader.cpp
		PNGDriverASyncLoader.h
		PNGDriverASyncLoader.cpp
		PNGDriverSyncLoader.h
		PNGDriverSyncLoader.cpp
	)
	
	SET(LIBPNG_INCLUDE_DIR
		../../../3party/libpng/
	)
	
	
	IF(BUILD_SHARED_PNG_DRIVER)
		MESSAGE("Building shred ")
		ADD_DEFINITIONS(-D_FREYA_SHARED_PLUGIN)
		INCLUDE_DIRECTORIES(${LIBPNG_INCLUDE_DIR})
		ADD_LIBRARY(PNGDriver MODULE ${PNG_DRIVER_SOURCE} PNGDriverSharedBuild.cpp ${RESOURCE_PLUGINS_ADDITIONAL_SOURCES})
		TARGET_LINK_LIBRARIES(PNGDriver ${GLOBAL_LINK_LIBRARIES} zlib png FreyaCore)
		SET_TARGET_PROPERTIES(PNGDriver PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/Plugins
													LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}/Plugins
													LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}/Plugins
													LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL}/Plugins
													LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO}/Plugins)
		AddPlugin(PNGDriver)
	ELSE(BUILD_SHARED_PNG_DRIVER)
		ADD_LIBRARY(PNGDriver STATIC ${PNG_DRIVER_SOURCE} PNGDriverStaticBuild.cpp)
		SET(FREYA_CORE_LINK_LIBRARIES ${FREYA_CORE_LINK_LIBRARIES} PNGDriver)
		SET_PROPERTY(GLOBAL PROPERTY FREYA_CORE_LINK_LIBRARIES_GLOBAL ${FREYA_CORE_LINK_LIBRARIES})
		addResourcePlugin(PNGDriver)
	ENDIF(BUILD_SHARED_PNG_DRIVER)
ENDIF(BUILD_PNG_DRIVER)