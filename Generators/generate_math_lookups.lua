-- defaults
local subdivs = 1000 -- modify this value before calling cmake to override number of subdivisions for sin and arcsin tables
					  -- total nuber of subdivisions will be subdivs*2 + 1

local function open_cpp_file()
	local file_cpp = io.open("math_lookup_tables.cpp","w")
	local file_h   = io.open("math_lookup_tables.h","w")
	-- Write headers
	file_cpp:write("/*\n * This file is an autogenerated source file containing the lookup tables used by Freya 3D engine\n * Please, do not modify it\n */\n")
	file_h:write("/*\n * This file is an autogenerated header file containing the lookup tables used by Freya 3D engine\n * Please, do not modify it\n */\n")
	-- Write guards
	file_h:write("#ifndef _MATH_LOOKUP_TABLES_H_\n#define _MATH_LOOKUP_TABLES_H_\n\n")
	file_h:write("namespace math\n{\nnamespace __internal\n{\n\n")
	-- Include h file
	file_cpp:write("#include \"math_lookup_tables.h\"\n\n" )
	file_cpp:write("namespace math\n{\nnamespace __internal\n{\n\n")
	return file_cpp,file_h
end

local function close_cpp_file(file_cpp,file_h)
	file_cpp:write("\n} /* namespace __internal */\n} /* namespace math */\n")
	file_cpp:close()
	
	file_h:write("\n#endif /*_MATH_LOOKUP_TABLES_H_*/\n")
	file_h:write("\n} /* namespace __internal */\n} /* namespace math */\n")
	file_h:close()
end

local function write_table (file_h,file_cpp,table,name)
	file_h:write("extern const float "..name.."[];\n\n")
	file_cpp:write("const float "..name.."[] = {\n\t\t")
	--file_cpp
	local i
	for i = 0,2*subdivs do
		file_cpp:write(string.format("% .10f",table[i]),", ")
		if math.mod(i,6) == 0 then
			file_cpp:write("\n\t\t")
		end
	end
	file_cpp:write("\n\t};\n\n")
end

local file_cpp,file_h = open_cpp_file()

file_h:write("//total nuber of subdivisions will be sub_divisions*2 + 1\n//You can modify this value in file Generators/generate_math_lookups.lua\nstatic const unsigned sub_divisions = ",subdivs,";\n\n")

local i

-- sine lookup
local sin_table = {}

for i = 0,2*subdivs do
	sin_table[i] = math.sin( i*math.pi / subdivs )
end
	sin_table[2*subdivs  + 1] = sin_table[2*subdivs ]
-- write sine table
write_table (file_h,file_cpp,sin_table,"sin_table")

-- cosine table
local cos_table = {}

for i = 0,2*subdivs do
	cos_table[i] = math.cos( i * math.pi / subdivs )
end
	cos_table[2*subdivs + 1] = cos_table[2*subdivs]
write_table (file_h,file_cpp,cos_table,"cos_table")

-- asine table (and there is definetly no need for acos one because of arcsin + arccos = PI/2
local acos_table = {}

for i = 0,2*subdivs do
	acos_table[i] = math.acos( i / subdivs - 1.0)
end
	acos_table[2*subdivs + 1] = acos_table[2*subdivs]
write_table (file_h,file_cpp,acos_table,"acos_table")

close_cpp_file(file_cpp,file_h)