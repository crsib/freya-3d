digraph G
{
  edge [fontname="FreeSans",fontsize="10",labelfontname="FreeSans",labelfontsize="10"];
  node [fontname="FreeSans",fontsize="10",shape=record];
  Node1 [label="{core::EngineCore\n|- m_LogStream\l- m_OldLogStream\l- m_MemoryArena\l- m_Filesystem\l- m_WindowManager\l- m_RenderingDriver\l- m_Running\l- m_Instance\l- m_WMFactory\l- m_RAPIFactory\l- m_TaskManager\l- m_ResourceManager\l- m_ThreadImplementation\l|+ EngineCore()\l+ ~EngineCore()\l+ getWindowManager()\l+ createWindowManager()\l+ getTaskManager()\l+ getResourceManager()\l+ getMemoryArena()\l+ getFilesystem()\l+ getRenderingDriver()\l+ createRenderingDriver()\l+ createRenderingDriver()\l+ isRunning()\l+ shutdown()\l+ getInstance()\l+ registerWindowManager()\l+ registerRenderingDriver()\l+ createThread()\l+ destroyThread()\l+ createMutex()\l+ destroyMutex()\l+ createCondition()\l+ destroyCondition()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node1 -> Node1 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="m_Instance",arrowtail="open",fontname="FreeSans"];
  Node2 -> Node1 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="m_RenderingDriver",arrowtail="open",fontname="FreeSans"];
  Node2 [label="{renderer::RenderingAPIDriver\n||+ id()\l+ getAPIName()\l+ getShaderAPIName()\l+ futuresState()\l+ futures()\l+ setViewport()\l+ clearColorValue()\l+ clearColor()\l+ setPerspective()\l+ setOrtho()\l+ enableDepthTest()\l+ disableDepthTest()\l+ clearDepthValue()\l+ clearDepth()\l+ depthFunction()\l+ enableStencilTest()\l+ disableStencilTest()\l+ clearStencilValue()\l+ clearStencil()\l+ stencilFunction()\l+ stencilOp()\l+ enableAlphaTest()\l+ disableAlphaTest()\l+ alphaTestFunction()\l+ enableAlphaBlend()\l+ disableAlphaBlend()\l+ alphaBlendFunction()\l+ enableCulling()\l+ disableCulling()\l+ setFrontFace()\l+ setCullFace()\l+ enablePolygonOffset()\l+ disablePolygonOffset()\l+ setPolygonOffset()\l+ loadMatrix()\l+ loadIdentityMatrix()\l+ multMatrix()\l+ pushMatrix()\l+ popMatrix()\l+ setMatrixMode()\l+ translate()\l+ translate()\l+ rotate()\l+ rotate()\l+ rotate()\l+ scale()\l+ createTexture()\l+ destroyTexture()\l+ enableGeneration()\l+ disableGeneration()\l+ setEyePlane()\l+ setObjectPlane()\l+ createVertexBufferObject()\l+ destroyVertexBufferObject()\l+ drawPrimitive()\l+ drawIndexedPrimitive()\l+ drawPrimitive()\l+ drawIndexedPrimitive()\l+ enableClientState()\l+ disableClientState()\l+ enableTextureCoordState()\l+ disableTextureCoordState()\l+ colorPointer()\l+ colorIndexPointer()\l+ normalPointer()\l+ textureCoordPointer()\l+ vertexPointer()\l+ fogCoordPointer()\l+ setRenderMode()\l+ enableFog()\l+ disableFog()\l+ setFogFunction()\l+ setLinearFogBoundaries()\l+ setFogDensity()\l+ setFogColor()\l+ createFramebuffer()\l+ destroyFramebuffer()\l+ createShader()\l+ destroyShader()\l+ setColorWrite()\l+ setDepthWrite()\l# RenderingAPIDriver()\l# ~RenderingAPIDriver()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrenderer_1_1RenderingAPIDriver.html",tooltip="The abstraction class for generally used rendering commands."];
  Node3 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node3 [label="{core::drivermodel::Driver\n||+ id()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcore_1_1drivermodel_1_1Driver.html",tooltip="This class is a base class for all engine drivers."];
  Node4 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node4 [label="{EngineSubsystem\n||+ EngineSubsystem()\l+ ~EngineSubsystem()\l+ operator new()\l+ operator delete()\l+ operator new[]()\l+ operator delete[]()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEngineSubsystem.html",tooltip="This class corrects memory management routines for any engine class except EngineCore..."];
  Node5 -> Node1 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="m_TaskManager",arrowtail="open",fontname="FreeSans"];
  Node5 [label="{core::taskmanager::TaskManager\n|- m_MainThreadSchedule\l- m_SecThreadSchedule\l- m_Threads\l- m_ThreadNumber\l- m_Thread\l- m_MutexAux\l- m_MutexPri\l- m_ThreadActive\l- m_Func\l|+ addTask()\l+ addAsynchronousTask()\l+ setThreadNumber()\l+ getThreadNumber()\l+ enterMainLoop()\l- TaskManager()\l- ~TaskManager()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcore_1_1taskmanager_1_1TaskManager.html",tooltip="This class is a manger for task routines."];
  Node4 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node6 -> Node5 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="m_MutexAux\nm_MutexPri",arrowtail="open",fontname="FreeSans"];
  Node6 [label="{core::multithreading::Mutex\n||+ id()\l+ lock()\l+ tryLock()\l+ unlock()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcore_1_1multithreading_1_1Mutex.html",tooltip="This is implementation independent abstraction of mutex concept."];
  Node3 -> Node6 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node7 -> Node5 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="m_Thread",arrowtail="open",fontname="FreeSans"];
  Node7 [label="{core::multithreading::Thread\n||+ id()\l+ threadID()\l+ wait()\l+ timedWait()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcore_1_1multithreading_1_1Thread.html",tooltip="Platform independent abstraction of thread of execution."];
  Node3 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node8 -> Node1 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="m_Filesystem",arrowtail="open",fontname="FreeSans"];
  Node8 [label="{core::filesystem::Filesystem\n|- m_AllDrivers\l- m_ReadOnlyDrivers\l- m_WritableDrivers\l- m_Factory\l|+ mount()\l+ list()\l+ makeDir()\l+ dirExists()\l+ fileExists()\l+ read()\l+ read()\l+ fileSize()\l+ write()\l+ remove()\l+ where()\l+ registerDriver()\l# Filesystem()\l# ~Filesystem()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcore_1_1filesystem_1_1Filesystem.html",tooltip="This is a filesystem representation class."];
  Node4 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node9 -> Node1 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="m_ResourceManager",arrowtail="open",fontname="FreeSans"];
  Node9 [label="{resources::ResourceManager\n|- m_Drivers\l- m_ResourceLibrary\l|+ load()\l+ load()\l+ free()\l+ registerDriver()\l- ResourceManager()\l- ~ResourceManager()\l- __findDriver()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classresources_1_1ResourceManager.html",tooltip="Resource manager subsytem."];
  Node4 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
}
