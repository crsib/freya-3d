#
# File generated by CMakeBuilder
#
#
     
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

PROJECT ( Freya3D ) 
 
 
#Setup enviroment

SET ( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/Build/Static )
SET ( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/Build/Bin )
SET ( PLUGIN_OUTPUT_DIRECTORY 		 ${CMAKE_SOURCE_DIR}/Build/Bin/Plugins )
SET ( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/Build/Bin )
SET ( INTERMIDIATE_DIRECTORY		 ${CMAKE_SOURCE_DIR}/Build/Intermediate )	
SET ( GENERATORS_DIRECTORY           ${CMAKE_SOURCE_DIR}/Generators )
SET ( APP_DATA                       ${CMAKE_SOURCE_DIR}/Data )
SET ( APP_STD_DATA                   ${CMAKE_SOURCE_DIR}/Data/STD )

IF(NOT EXISTS ${INTERMIDIATE_DIRECTORY}/)
	FILE(MAKE_DIRECTORY ${INTERMIDIATE_DIRECTORY})
ENDIF()

MESSAGE(STATUS "Searching lua")
FIND_PROGRAM( LUA_APP NAMES lua lua51 lua5 lua5.1 PATH ${LUA_APP_PATH} )
IF( NOT LUA_APP )
    MESSAGE(FATAL_ERROR "Failed to find lua application. Please,set LUA_APP_PATH to path, where one of lua lua51 lua5 lua5.1 is located" )
ENDIF( NOT LUA_APP )

#Global includes for all Freya Subprojects 
INCLUDE_DIRECTORIES( Framework/Include ${INTERMIDIATE_DIRECTORY})

#IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  SET(CMAKE_INSTALL_PREFIX "${CMAKE_SOURCE_DIR}/Build/Install" CACHE PATH "Default install prefix" FORCE)
#ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)

# Enable SSE2 usage
IF( CMAKE_COMPILER_IS_GNUCC )
    IF(CMAKE_CXX_FLAGS)
        STRING(REGEX MATCH "-msse2 -mfpmath=sse"
                SSE2_CXX_RES ${CMAKE_CXX_FLAGS})
    ENDIF(CMAKE_CXX_FLAGS)
 	
    IF(CMAKE_C_FLAGS)
        STRING(REGEX MATCH "-msse2 -mfpmath=sse"
            SSE2_C_RES ${CMAKE_C_FLAGS})
    ENDIF(CMAKE_C_FLAGS)
 	
    IF(NOT SSE2_CXX_RES)
        SET(TMP_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse2 -mfpmath=sse")
        SET(CMAKE_CXX_FLAGS ${TMP_CXX_FLAGS}
             CACHE STRING "Freya 3D defaults" FORCE )
    ENDIF(NOT SSE2_CXX_RES)

    IF(NOT SSE2_C_RES)
        SET(TMP_C_FLAGS "${CMAKE_C_FLAGS} -msse2 -mfpmath=sse")
        SET(CMAKE_C_FLAGS ${TMP_C_FLAGS}
                                 CACHE STRING "Freya 3D defaults" FORCE )
    ENDIF(NOT SSE2_C_RES)
    
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fvisibility=hidden ")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden ")

ENDIF( CMAKE_COMPILER_IS_GNUCC )

IF(MSVC)
    ADD_DEFINITIONS("-D_CRT_SECURE_NO_DEPRECATE")
    ADD_DEFINITIONS("-D_CRT_SECURE_NO_WARNINGS")
    ADD_DEFINITIONS("-D_CRT_NONSTDC_NO_DEPRECATE")
    ADD_DEFINITIONS("-D_SECURE_SCL=0")
    ADD_DEFINITIONS("-D_SCL_SECURE_NO_WARNINGS")
    ADD_DEFINITIONS("-D_SCL_SECURE_NO_DEPRECATE")
    ADD_DEFINITIONS("-D_HAS_ITERATOR_DEBUGGING=0")
    ADD_DEFINITIONS(/arch:SSE2)
ENDIF(MSVC)
# Search for libraries
#Additional modules paths
SET	( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/CMakeFind ${CMAKE_SOURCE_DIR}/CMakeIncludes )

#Search for bullet physics library
FIND_PACKAGE( Bullet REQUIRED )
IF( BULLET_FOUND )
    INCLUDE_DIRECTORIES(AFTER ${BULLET_INCLUDE_DIRS} )
ELSE( )
    MESSAGE(FATAL "Freya 3D engine is heavy dependent on Bullet!")
ENDIF()


# Link libraries to executables
DEFINE_PROPERTY(GLOBAL PROPERTY RUNTIME_LINK_LIBRARIES_GLOBAL BRIEF_DOCS "Put libraries to link with executables here"  FULL_DOCS "Put libraries to link with executables here")

SET ( RUNTIME_LINK_LIBRARIES )
#Search for stlport 
FIND_PACKAGE(STLPort REQUIRED)
MESSAGE ("STLPort: \n\tinclude: ${STLPORT_INCLUDE_DIR} \n\tlibs: ${STLPORT_LIBRARIES}" )
#Set STL port include directories
INCLUDE_DIRECTORIES( ${STLPORT_INCLUDE_DIR} )
#Set stlport linkage
SET(GLOBAL_LINK_LIBRARIES ${STLPORT_LIBRARIES})
IF(APPLE)
	FIND_LIBRARY(COREFOUNDATION CoreFoundation)
	MESSAGE("Using CoreFoundation as ${COREFOUNDATION}")
	SET(GLOBAL_LINK_LIBRARIES ${STLPORT_LIBRARIES} ${COREFOUNDATION})
	FIND_LIBRARY(APP_SERVICES ApplicationServices)
	MESSAGE("Using ApplicationServices as ${APP_SERVICES}")
	SET(GLOBAL_LINK_LIBRARIES ${STLPORT_LIBRARIES} ${APP_SERVICES})
ENDIF(APPLE)
# Link libraries to FreyaCore in case of its static building
DEFINE_PROPERTY(GLOBAL PROPERTY FREYA_CORE_LINK_LIBRARIES_GLOBAL BRIEF_DOCS "Put libraries to link with FreyaCore here"  FULL_DOCS "Put libraries to link with FreyaCore here")
SET ( FREYA_CORE_LINK_LIBRARIES )
# non standart libraries, that needed to be copied near to executable
SET ( INSTALL_LIBRARIES )

IF(APPLE)
	ADD_DEFINITIONS( -D_FREYA_DEBUG_MEMORY -D_STLP_THREADS )
ELSE(APPLE)
	ADD_DEFINITIONS( -D_FREYA_DEBUG_MEMORY )
ENDIF(APPLE)

DEFINE_PROPERTY(GLOBAL PROPERTY SHARED_PLUGINS_GLOBAL BRIEF_DOCS "Put generated shared plugin list here"  FULL_DOCS "Put generated shared plugin list here")
DEFINE_PROPERTY(GLOBAL PROPERTY FILESYSTEM_PLUGINS_GLOBAL BRIEF_DOCS "Put generated filesystem plugin list here"  FULL_DOCS "Put generated shared plugin list here")
DEFINE_PROPERTY(GLOBAL PROPERTY RENDERER_PLUGINS_GLOBAL BRIEF_DOCS "Put generated renderer plugin list here"  FULL_DOCS "Put generated shared plugin list here")
DEFINE_PROPERTY(GLOBAL PROPERTY RESOURCE_PLUGINS_GLOBAL BRIEF_DOCS "Put generated resource plugin list here"  FULL_DOCS "Put generated shared plugin list here")
DEFINE_PROPERTY(GLOBAL PROPERTY WINDOWMANAGER_PLUGINS_GLOBAL BRIEF_DOCS "Put generated windowmanager plugin list here"  FULL_DOCS "Put generated shared plugin list here")
DEFINE_PROPERTY(GLOBAL PROPERTY INPUT_PLUGINS_GLOBAL BRIEF_DOCS "Put generated input plugin list here"  FULL_DOCS "Put generated shared plugin list here")

MESSAGE("CXX flags: ${CMAKE_CXX_FLAGS}")
#Build Plugins first

#Disable boost autolink
#ADD_DEFINITIONS( -DBOOST_ALL_NO_LIB )

IF(NOT DEFINED FREYA_CORE_USE_BOOST)
	SET ( FREYA_CORE_USE_BOOST YES )
ENDIF(NOT DEFINED FREYA_CORE_USE_BOOST)

IF( FREYA_CORE_USE_BOOST )
	SET (Boost_USE_STATIC_LIBS NO)
	FIND_PACKAGE ( BoostSTLPort 1.40 ) 
	INCLUDE_DIRECTORIES ( ${Boost_INCLUDE_DIRS} )
ENDIF()

#Build math library
ADD_SUBDIRECTORY ( Framework/Source/math )

#Build plugins
INCLUDE(  BuildPlugins )

#Build FreyaCore
INCLUDE ( GenerateStaticPlugins )
GenerateStaticPluginsBuild ()
IF( NOT DEFINED FREYA_CORE_SHARED )
	SET ( FREYA_CORE_SHARED YES )
ENDIF( NOT DEFINED FREYA_CORE_SHARED )


IF  ( FREYA_CORE_USE_BOOST )
	ADD_DEFINITIONS( -DUSE_BOOST_THREADS -DUSE_BOOST_FILESYSTEM )
ENDIF( FREYA_CORE_USE_BOOST )
GET_PROPERTY ( FREYA_CORE_LINK_LIBRARIES GLOBAL PROPERTY FREYA_CORE_LINK_LIBRARIES_GLOBAL )
MESSAGE ("FreyaCore additional dependencies: ${FREYA_CORE_LINK_LIBRARIES}")
#INCLUDE( ${CMAKE_SOURCE_DIR}/Framework/3party/cegui/CMakeList.txt ) 

ADD_SUBDIRECTORY ( Framework )

#Collect all shared plugins
GET_PROPERTY ( SHARED_PLUGINS GLOBAL PROPERTY SHARED_PLUGINS_GLOBAL )
MESSAGE( "Plugins found: ${SHARED_PLUGINS}" )
#Build Freya test executables
GET_PROPERTY ( RUNTIME_LINK_LIBRARIES GLOBAL PROPERTY RUNTIME_LINK_LIBRARIES_GLOBAL )
MESSAGE ("Executables will be linked with: ${RUNTIME_LINK_LIBRARIES}")
SET ( RUNTIME_LINK_LIBRARIES ${RUNTIME_LINK_LIBRARIES} FreyaMath_core )
# Build tests

ADD_SUBDIRECTORY ( Tests )
