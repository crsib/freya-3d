#
# File generated by CMakeBuilder
#
#
     
cmake_minimum_required ( VERSION 2.8 )

project ( Freya3D ) 
 
 
#Setup enviroment

set ( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/Build/Static )
set ( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/Build/Bin )
#if( WIN32)
set ( CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/Build/Bin )
set ( CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/Build/Bin )
set ( CMAKE_LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${CMAKE_SOURCE_DIR}/Build/Bin )
set ( CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ${CMAKE_SOURCE_DIR}/Build/Bin )
#endif()
set ( PLUGIN_OUTPUT_DIRECTORY 		 ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/Plugins )
set ( CMAKE_RUNTIME_OUTPUT_DIRECTORY 	 ${CMAKE_SOURCE_DIR}/Build/Bin )
#if( WIN32)
set ( CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/Build/Bin )
set ( CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/Build/Bin )
set ( CMAKE_RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${CMAKE_SOURCE_DIR}/Build/Bin )
set ( CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${CMAKE_SOURCE_DIR}/Build/Bin )
#endif()
set ( INTERMIDIATE_DIRECTORY		 ${CMAKE_SOURCE_DIR}/Build/Intermediate )	
set ( GENERATORS_DIRECTORY           ${CMAKE_SOURCE_DIR}/Generators )
set ( APP_DATA                       ${CMAKE_SOURCE_DIR}/Data )
set ( APP_STD_DATA                   ${CMAKE_SOURCE_DIR}/Data/STD )

if(NOT EXISTS ${INTERMIDIATE_DIRECTORY}/)
	FILE(MAKE_DIRECTORY ${INTERMIDIATE_DIRECTORY})
endif()

#Additional modules paths
set	( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/CMakeFind ${CMAKE_SOURCE_DIR}/CMakeIncludes )
if( APPLE )
set ( CMAKE_PROGRAM_PATH /opt/local/bin )
endif()

#Global includes for all Freya Subprojects 
include_directories( FreyaSupport/Include FreyaMath/Include FreyaReflect/Include FreyaLua/Include FreyaCore/Include ${INTERMIDIATE_DIRECTORY})

set(CMAKE_INSTALL_PREFIX "${CMAKE_SOURCE_DIR}/Build/Install" CACHE PATH "Default install prefix" )
set(FREYA_BUILD_SHARED true CACHE BOOL "Build shared version of Freya3D (possibly not supported on some platforms)" )
set(FREYA_TARGET_PLATFORM "x86" CACHE STRING "Target platform (x86 only, currently)" )
set(FREYA_USE_ICU	true CACHE BOOL "Use ICU for unicode support in Freya 3D Engine" )

string(COMPARE EQUAL "${FREYA_TARGET_PLATFORM}" "x86" FREYA_TARGET_PLATFORM_X86)

if( FREYA_TARGET_PLATFORM_X86 )
	message( STATUS "Configuring for x86")
endif()

# Enable SSE2 usage
if( CMAKE_COMPILER_IS_GNUCC AND FREYA_TARGET_PALTFORM_X86)
    if(CMAKE_CXX_FLAGS)
        STRING(REGEX MATCH "-msse2 -mfpmath=sse"
                SSE2_CXX_RES ${CMAKE_CXX_FLAGS})
    endif(CMAKE_CXX_FLAGS)
 	
    if(CMAKE_C_FLAGS)
        STRING(REGEX MATCH "-msse2 -mfpmath=sse"
            SSE2_C_RES ${CMAKE_C_FLAGS})
    endif(CMAKE_C_FLAGS)
 	
    if(NOT SSE2_CXX_RES)
        set(TMP_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse2 -mfpmath=sse")
        set(CMAKE_CXX_FLAGS ${TMP_CXX_FLAGS}
             CACHE STRING "Freya 3D defaults" FORCE )
    endif(NOT SSE2_CXX_RES)

    if(NOT SSE2_C_RES)
        set(TMP_C_FLAGS "${CMAKE_C_FLAGS} -msse2 -mfpmath=sse")
        set(CMAKE_C_FLAGS ${TMP_C_FLAGS}
                                 CACHE STRING "Freya 3D defaults" FORCE )
    endif(NOT SSE2_C_RES)
    
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fvisibility=hidden ")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden ")
endif( )

if(MSVC)
    add_definitions("-D_CRT_SECURE_NO_DEPRECATE")
    add_definitions("-D_CRT_SECURE_NO_WARNINGS")
    add_definitions("-D_CRT_NONSTDC_NO_DEPRECATE")
    add_definitions("-D_SECURE_SCL=0")
    add_definitions("-D_SCL_SECURE_NO_WARNINGS")
    add_definitions("-D_SCL_SECURE_NO_DEPRECATE")
    add_definitions("-D_HAS_ITERATOR_DEBUGGING=0")
    add_definitions(/arch:SSE2)
endif(MSVC)
# Search for libraries

# Link libraries to executables
define_property(GLOBAL PROPERTY RUNTIME_LINK_LIBRARIES_GLOBAL BRIEF_DOCS "Put libraries to link with executables here"  FULL_DOCS "Put libraries to link with executables here")
set ( RUNTIME_LINK_LIBRARIES )
# Link libraries to FreyaCore in case of its static building
define_property(GLOBAL PROPERTY FREYA_LINK_LIBRARIES_GLOBAL BRIEF_DOCS "Put libraries to link with FreyaCore here"  FULL_DOCS "Put libraries to link with FreyaCore here")
set ( FREYA_LINK_LIBRARIES )

if( NOT FREYA_BUILD_SHARED )
	message( STATUS "Configuring for static build" )
	add_definitions( -D_STATIC_BUILD )
endif()

if( FREYA_USE_ICU )
	find_package( ICU REQUIRED )
	if( NOT ICU_FOUND )
		message( FATAL_ERROR "Error: failed to find ICU library!")
	endif()
	include_directories( ${ICU_INCLUDE_DIR} )
	add_definitions( -DFREYA_USE_ICU=1 )
endif()

# Libraries
# Support library
add_subdirectory ( FreyaSupport ) 
# Math library
add_subdirectory ( FreyaMath )
# Reflection library
add_subdirectory ( FreyaReflect )
# Lua support library 
add_subdirectory ( FreyaLua )
# Freya core
add_subdirectory ( FreyaCore )

# Build tests
add_subdirectory ( Tests )

if(NOT APPLE)
#Copy std data directory
message (STATUS "Copying data directory... (Using ${CMAKE_COMMAND})")
execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory ${APP_DATA} ${CMAKE_SOURCE_DIR}/Build/Bin )
execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory ${APP_STD_DATA} ${CMAKE_SOURCE_DIR}/Build/Bin )
endif()