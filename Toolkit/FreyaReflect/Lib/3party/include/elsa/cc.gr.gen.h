// cc.gr.gen.h
// *** DO NOT EDIT BY HAND ***
// automatically generated by elkhound, from cc.gr

#ifndef CC_GR_GEN_H
#define CC_GR_GEN_H

#include "useract.h"     // UserActions


#line 71 "cc.gr"


#include "cc_type.h"      // type identifiers like ST_CHAR (r)
#include "cc_tokens.h"    // lexer's token ids for classify()
#include "trace.h"        // trace
#include "cc_ast.h"       // C++ abstract syntax
#include "cc_lang.h"      // CCLang
#include "ccparse.h"      // ParseEnv, the parser context class
#include "exprloc.h"      // EXPR_LOCK macros

#define D(msg) \
  trace("cc") << msg << endl

inline std::ostream& operator<< (std::ostream &os, SourceLoc sl)
  { return os << toString(sl); }

// implemented in implint.cc
bool filterOutImplIntFirstParam
  (SourceLoc loc,
   IDeclarator *base,
   FakeList<ASTTypeId> *&params);

// implemented at end of file
bool isGlobalScopeQualified(PQName const *pq);
bool endsWithIdentifier(TypeSpecifier const *ts);
bool keepDeclaration(Declaration const *d);


// this is the shareable fragment of CCParse, since the new
// Elkhound behavior prevents extension modules from inheriting
// directly from CCParse
class CCParseShareable : public UserActions, public ParseEnv {
public:
  CCParseShareable(StringTable &table, CCLang &lang)
    : ParseEnv(table, lang) {}

  // when this is the last element in a parameter list, the function
  // is a vararg function
  ASTTypeId *ellipsisTypeId(SourceLoc loc)
  {
    ASTTypeId *tid =
      new ASTTypeId(new TS_simple(loc, ST_ELLIPSIS),
                    new Declarator(new D_name(loc, NULL /*name*/),
                                   NULL /*init*/));
    return tid;
  }

  // make a TS_name, and supply CV flags
  TS_name *new_TS_name(SourceLoc loc, CVFlags cv, PQName *n,
                       bool typenameUsed)
  {
    TS_name *ret = new TS_name(loc, n, typenameUsed);
    ret->cv = cv;
    return ret;
  }

  // make a TS_simple, and supply CV flags
  TS_simple *new_TS_simple(SourceLoc loc, CVFlags cv, SimpleTypeId id)
  {
    TS_simple *ret = new TS_simple(loc, id);
    ret->cv = cv;
    return ret;
  }

  // make a D_func but not if it attempts to be the return value of
  // another function (this helps resolve an ambiguity in the presence
  // of implicit int.. is it needed even without implicit int?)
  D_func *new_D_func
    (SourceLoc loc,
     IDeclarator *base,
     FakeList<ASTTypeId> *params,
     CVFlags cv,
     ExceptionSpec /*nullable*/ *exnSpec)
  {
    if (base->isD_func()) {
      TRACE("cancel", loc << ": function returning a function");
      return NULL;
    }
    if (lang.allowImplicitInt
        && !filterOutImplIntFirstParam(loc, base, params)) {
      return NULL;
    }
    return new D_func(loc, base, params, cv, exnSpec);
  }

  D_array *new_D_array
    (SourceLoc loc, IDeclarator *base, Expression * /*nullable*/ size)
  {
    if (base->isD_func()) {
      TRACE("cancel", loc << ": function returning an array");
      return NULL;
    }
    return new D_array(loc, base, size);
  }

  TemplateArgument *templateUsed(TemplateArgument *list)
  {
    return new TA_templateUsed(list);
  }
};


#line 115 "cc.gr.gen.h"


#line 272 "gnu.gr"

  // make a TS_typeof, and supply CV flags
  inline static TS_typeof *new_TS_typeof(SourceLoc loc, CVFlags cv, ASTTypeof *atype)
  {
    TS_typeof *ret = new TS_typeof(loc, atype);
    ret->cv = cv;
    return ret;
  }

#line 128 "cc.gr.gen.h"


#line 15 "kandr.gr"

  #include "kandr.h"      // makeKandRdefn, etc.

#line 135 "cc.gr.gen.h"


// parser context class
class 
#line 175 "cc.gr"
 CCParse : public CCParseShareable {
public:
  CCParse(StringTable &table, CCLang &lang)
    : CCParseShareable(table, lang) {}

#line 146 "cc.gr.gen.h"


private:
  USER_ACTION_FUNCTIONS      // see useract.h

  // declare the actual action function
  static SemanticValue doReductionAction(
    CCParse *ths,
    int productionId, SemanticValue const *semanticValues,
  SourceLoc loc,
  SourceLoc endloc);

  // declare the classifier function
  static int reclassifyToken(
    CCParse *ths,
    int oldTokenType, SemanticValue sval);

  TranslationUnit* action0___EarlyStartSymbol(SourceLoc loc, SourceLoc endloc, TranslationUnit* top);
  TranslationUnit* action1_File(SourceLoc loc, SourceLoc endloc, TranslationUnit* t);
  StringRef action2_Identifier(SourceLoc loc, SourceLoc endloc, StringRef n);
  TranslationUnit* action3_TranslationUnit(SourceLoc loc, SourceLoc endloc);
  TranslationUnit* action4_TranslationUnit(SourceLoc loc, SourceLoc endloc, TranslationUnit* t, TopForm* d);
  TranslationUnit* action5_TranslationUnit(SourceLoc loc, SourceLoc endloc, TranslationUnit* t);
  Expression* action6_PrimaryExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action7_PrimaryExpression(SourceLoc loc, SourceLoc endloc);
  Expression* action8_PrimaryExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action9_PrimaryExpression(SourceLoc loc, SourceLoc endloc, PQName* e);
  Expression* action10_PrimaryExpression(SourceLoc loc, SourceLoc endloc, S_compound* cs);
  Expression* action11_PrimaryExpression(SourceLoc loc, SourceLoc endloc, ASTTypeId* t, IN_compound* i);
  Expression* action12_PrimaryExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action13_PrimaryExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action14_Literal(SourceLoc loc, SourceLoc endloc, StringRef i);
  Expression* action15_Literal(SourceLoc loc, SourceLoc endloc, StringRef f);
  Expression* action16_Literal(SourceLoc loc, SourceLoc endloc, E_stringLit* s);
  Expression* action17_Literal(SourceLoc loc, SourceLoc endloc, StringRef c);
  Expression* action18_Literal(SourceLoc loc, SourceLoc endloc);
  Expression* action19_Literal(SourceLoc loc, SourceLoc endloc);
  StringRef action20_PreprocString(SourceLoc loc, SourceLoc endloc, StringRef s);
  StringRef action21_PreprocString(SourceLoc loc, SourceLoc endloc);
  StringRef action22_PreprocString(SourceLoc loc, SourceLoc endloc);
  E_stringLit* action23_StringLiteral(SourceLoc loc, SourceLoc endloc, StringRef s);
  E_stringLit* action24_StringLiteral(SourceLoc loc, SourceLoc endloc, StringRef s, E_stringLit* cont);
  PQName* action25_IdExpression(SourceLoc loc, SourceLoc endloc, PQName* id);
  PQName* action26_IdExpression(SourceLoc loc, SourceLoc endloc, PQName* id);
  PQName* action27_UnqualifiedId(SourceLoc loc, SourceLoc endloc, StringRef id);
  PQName* action28_UnqualifiedId(SourceLoc loc, SourceLoc endloc, OperatorName* on);
  PQName* action29_UnqualifiedId(SourceLoc loc, SourceLoc endloc, OperatorName* on);
  PQName* action30_UnqualifiedId(SourceLoc loc, SourceLoc endloc, PQ_template* id);
  PQName* action31_PQualifiedId(SourceLoc loc, SourceLoc endloc, PQName* id);
  PQName* action32_PQualifiedId(SourceLoc loc, SourceLoc endloc, StringRef n, PQName* id);
  PQName* action33_PQualifiedId(SourceLoc loc, SourceLoc endloc, StringRef n, /*fakelist*/TemplateArgument* targs, PQName* id);
  PQName* action34_PQualifiedId(SourceLoc loc, SourceLoc endloc, StringRef n, /*fakelist*/TemplateArgument* targs, PQName* id);
  FakeList<ArgExpression>* action35_ArgumentList(SourceLoc loc, SourceLoc endloc, FakeList<ArgExpression>* e);
  Expression* action36_PostfixExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action37_PostfixExpression(SourceLoc loc, SourceLoc endloc, Expression* a, Expression* e);
  Expression* action38_PostfixExpression(SourceLoc loc, SourceLoc endloc, Expression* f, FakeList<ArgExpression>* a);
  Expression* action39_PostfixExpression(SourceLoc loc, SourceLoc endloc, PQName* t, FakeList<ArgExpression>* a);
  Expression* action40_PostfixExpression(SourceLoc loc, SourceLoc endloc, TypeSpecifier* spec, FakeList<ArgExpression>* a);
  Expression* action41_PostfixExpression(SourceLoc loc, SourceLoc endloc, Expression* p, PQName* n);
  Expression* action42_PostfixExpression(SourceLoc loc, SourceLoc endloc, Expression* p, PQName* n);
  Expression* action43_PostfixExpression(SourceLoc loc, SourceLoc endloc, Expression* p);
  Expression* action44_PostfixExpression(SourceLoc loc, SourceLoc endloc, Expression* p);
  Expression* action45_PostfixExpression(SourceLoc loc, SourceLoc endloc, CastKeyword k, ASTTypeId* t, Expression* e);
  Expression* action46_PostfixExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action47_PostfixExpression(SourceLoc loc, SourceLoc endloc, ASTTypeId* t);
  Expression* action48_PostfixExpression(SourceLoc loc, SourceLoc endloc, Expression* pe);
  Expression* action49_PostfixExpression(SourceLoc loc, SourceLoc endloc, ASTTypeId* t);
  Expression* action50_PostfixExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action51_PostfixExpression(SourceLoc loc, SourceLoc endloc, ASTTypeId* t, Expression* n);
  Expression* action52_PostfixExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action53_PostfixExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action54_PostfixExpression(SourceLoc loc, SourceLoc endloc, Expression* e, ASTTypeId* t);
  TypeSpecifier* action55_CtorExpressionType(SourceLoc loc, SourceLoc endloc, PQName* n);
  TypeSpecifier* action56_CtorExpressionType(SourceLoc loc, SourceLoc endloc);
  TypeSpecifier* action57_CtorExpressionType(SourceLoc loc, SourceLoc endloc);
  TypeSpecifier* action58_CtorExpressionType(SourceLoc loc, SourceLoc endloc);
  TypeSpecifier* action59_CtorExpressionType(SourceLoc loc, SourceLoc endloc);
  TypeSpecifier* action60_CtorExpressionType(SourceLoc loc, SourceLoc endloc);
  TypeSpecifier* action61_CtorExpressionType(SourceLoc loc, SourceLoc endloc);
  TypeSpecifier* action62_CtorExpressionType(SourceLoc loc, SourceLoc endloc);
  TypeSpecifier* action63_CtorExpressionType(SourceLoc loc, SourceLoc endloc);
  TypeSpecifier* action64_CtorExpressionType(SourceLoc loc, SourceLoc endloc);
  TypeSpecifier* action65_CtorExpressionType(SourceLoc loc, SourceLoc endloc);
  TypeSpecifier* action66_CtorExpressionType(SourceLoc loc, SourceLoc endloc);
  CastKeyword action67_CastKeyword(SourceLoc loc, SourceLoc endloc);
  CastKeyword action68_CastKeyword(SourceLoc loc, SourceLoc endloc);
  CastKeyword action69_CastKeyword(SourceLoc loc, SourceLoc endloc);
  CastKeyword action70_CastKeyword(SourceLoc loc, SourceLoc endloc);
  FakeList<ArgExpression>* action71_ExpressionList(SourceLoc loc, SourceLoc endloc, Expression* a);
  FakeList<ArgExpression>* action72_ExpressionList(SourceLoc loc, SourceLoc endloc, Expression* a, FakeList<ArgExpression>* e);
  FakeList<ArgExpression>* action73_ExpressionListOpt(SourceLoc loc, SourceLoc endloc);
  FakeList<ArgExpression>* action74_ExpressionListOpt(SourceLoc loc, SourceLoc endloc, FakeList<ArgExpression>* e);
  Expression* action75_UnaryExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action76_UnaryExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action77_UnaryExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action78_UnaryExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action79_UnaryExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action80_UnaryExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action81_UnaryExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action82_UnaryExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action83_UnaryExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action84_UnaryExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action85_UnaryExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action86_UnaryExpression(SourceLoc loc, SourceLoc endloc, ASTTypeId* t);
  Expression* action87_UnaryExpression(SourceLoc loc, SourceLoc endloc, E_new* e);
  Expression* action88_UnaryExpression(SourceLoc loc, SourceLoc endloc, StringRef n);
  bool action89_ColonColonOpt(SourceLoc loc, SourceLoc endloc);
  bool action90_ColonColonOpt(SourceLoc loc, SourceLoc endloc);
  E_new* action91_NewExpression(SourceLoc loc, SourceLoc endloc, bool c, FakeList<ArgExpression>* p, ASTTypeId* t, ArgExpressionListOpt* i);
  E_new* action92_NewExpression(SourceLoc loc, SourceLoc endloc, bool c, FakeList<ArgExpression>* p, ASTTypeId* t, ArgExpressionListOpt* i);
  FakeList<ArgExpression>* action93_NewPlacementOpt(SourceLoc loc, SourceLoc endloc);
  FakeList<ArgExpression>* action94_NewPlacementOpt(SourceLoc loc, SourceLoc endloc, FakeList<ArgExpression>* lst);
  ASTTypeId* action95_NewTypeId(SourceLoc loc, SourceLoc endloc, TypeSpecifier* spec, IDeclarator* decl);
  IDeclarator* action96_NewDeclaratorOpt(SourceLoc loc, SourceLoc endloc);
  IDeclarator* action97_NewDeclaratorOpt(SourceLoc loc, SourceLoc endloc, enum CVFlags cv, IDeclarator* d);
  IDeclarator* action98_NewDeclaratorOpt(SourceLoc loc, SourceLoc endloc, PQName* n, enum CVFlags cv, IDeclarator* d);
  IDeclarator* action99_NewDeclaratorOpt(SourceLoc loc, SourceLoc endloc, IDeclarator* d);
  IDeclarator* action100_DirectNewDeclarator(SourceLoc loc, SourceLoc endloc, Expression* sz);
  IDeclarator* action101_DirectNewDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d, Expression* sz);
  ArgExpressionListOpt* action102_NewInitializerOpt(SourceLoc loc, SourceLoc endloc);
  ArgExpressionListOpt* action103_NewInitializerOpt(SourceLoc loc, SourceLoc endloc, FakeList<ArgExpression>* lst);
  Expression* action104_DeleteExpression(SourceLoc loc, SourceLoc endloc, bool c, Expression* e);
  Expression* action105_DeleteExpression(SourceLoc loc, SourceLoc endloc, bool c, Expression* e);
  PQName* action106_NameAfterDot(SourceLoc loc, SourceLoc endloc, PQName* n);
  PQName* action107_NameAfterDot(SourceLoc loc, SourceLoc endloc, PQName* n);
  PQName* action108_NAD1(SourceLoc loc, SourceLoc endloc, PQName* n);
  PQName* action109_NAD1(SourceLoc loc, SourceLoc endloc, StringRef n, /*fakelist*/TemplateArgument* list);
  PQName* action110_NAD1(SourceLoc loc, SourceLoc endloc, StringRef n);
  PQName* action111_NAD1(SourceLoc loc, SourceLoc endloc, StringRef n, /*fakelist*/TemplateArgument* list);
  PQName* action112_NAD1(SourceLoc loc, SourceLoc endloc, OperatorName* on);
  PQName* action113_NAD1(SourceLoc loc, SourceLoc endloc, StringRef n, /*fakelist*/TemplateArgument* list, PQName* rest);
  PQName* action114_NAD2(SourceLoc loc, SourceLoc endloc, StringRef n, /*fakelist*/TemplateArgument* list);
  PQName* action115_NAD2(SourceLoc loc, SourceLoc endloc, StringRef n);
  PQName* action116_NAD2(SourceLoc loc, SourceLoc endloc, OperatorName* on);
  PQName* action117_NAD2(SourceLoc loc, SourceLoc endloc, OperatorName* on, /*fakelist*/TemplateArgument* list);
  PQName* action118_NAD2(SourceLoc loc, SourceLoc endloc, OperatorName* on, /*fakelist*/TemplateArgument* list);
  PQName* action119_NAD2(SourceLoc loc, SourceLoc endloc, StringRef n, /*fakelist*/TemplateArgument* list, PQName* rest);
  PQName* action120_NAD2(SourceLoc loc, SourceLoc endloc, StringRef n, PQName* rest);
  Expression* action121_CastExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action122_CastExpression(SourceLoc loc, SourceLoc endloc, ASTTypeId* t, Expression* e);
  Expression* action123_CastExpression(SourceLoc loc, SourceLoc endloc, ASTTypeId* t, Expression* e);
  Expression* action124_BinExp_high(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action125_BinExp_high(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action126_BinExp_high(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action127_BinExp_high(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action128_BinExp_high(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action129_BinExp_high(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action130_BinExp_high(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action131_BinExp_high(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action132_BinExp_high(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action133_BinExp_high(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action134_BinExp_mid(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action135_BinExp_mid(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action136_BinExp_mid(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action137_BinExp_mid(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action138_BinExp_mid(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action139_BinExp_mid(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action140_BinExp_mid(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action141_BinaryExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action142_BinaryExpression(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action143_BinaryExpression(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action144_BinaryExpression(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action145_BinaryExpression(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action146_BinaryExpression(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action147_BinaryExpression(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action148_BinaryExpression(SourceLoc loc, SourceLoc endloc, Expression* left, Expression* right);
  Expression* action149_ConditionalExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action150_ConditionalExpression(SourceLoc loc, SourceLoc endloc, Expression* cond, Expression* th, Expression* el);
  Expression* action151_ConditionalExpression(SourceLoc loc, SourceLoc endloc, Expression* cond, Expression* el);
  Expression* action152_AssignmentExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action153_AssignmentExpression(SourceLoc loc, SourceLoc endloc, Expression* e1, enum BinaryOp op, Expression* e2);
  Expression* action154_AssignmentExpression(SourceLoc loc, SourceLoc endloc, E_throw* e);
  enum BinaryOp action155_AssignmentOperator(SourceLoc loc, SourceLoc endloc);
  enum BinaryOp action156_AssignmentOperator(SourceLoc loc, SourceLoc endloc);
  enum BinaryOp action157_AssignmentOperator(SourceLoc loc, SourceLoc endloc);
  enum BinaryOp action158_AssignmentOperator(SourceLoc loc, SourceLoc endloc);
  enum BinaryOp action159_AssignmentOperator(SourceLoc loc, SourceLoc endloc);
  enum BinaryOp action160_AssignmentOperator(SourceLoc loc, SourceLoc endloc);
  enum BinaryOp action161_AssignmentOperator(SourceLoc loc, SourceLoc endloc);
  enum BinaryOp action162_AssignmentOperator(SourceLoc loc, SourceLoc endloc);
  enum BinaryOp action163_AssignmentOperator(SourceLoc loc, SourceLoc endloc);
  enum BinaryOp action164_AssignmentOperator(SourceLoc loc, SourceLoc endloc);
  enum BinaryOp action165_AssignmentOperator(SourceLoc loc, SourceLoc endloc);
  Expression* action166_Expression(SourceLoc loc, SourceLoc endloc, Expression* ae);
  Expression* action167_Expression(SourceLoc loc, SourceLoc endloc, Expression* e, Expression* ae);
  Expression* action168_ExpressionOpt(SourceLoc loc, SourceLoc endloc);
  Expression* action169_ExpressionOpt(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action170_ConstantExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Expression* action171_ConstantExpressionOpt(SourceLoc loc, SourceLoc endloc);
  Expression* action172_ConstantExpressionOpt(SourceLoc loc, SourceLoc endloc, Expression* e);
  StringRef action173_LabelAndColon(SourceLoc loc, SourceLoc endloc, StringRef n);
  StringRef action174_LabelAndColon(SourceLoc loc, SourceLoc endloc, StringRef n);
  Statement* action175_Statement(SourceLoc loc, SourceLoc endloc, StringRef n, Statement* s);
  Statement* action176_Statement(SourceLoc loc, SourceLoc endloc, Expression* e, Statement* s);
  Statement* action177_Statement(SourceLoc loc, SourceLoc endloc, Statement* s);
  Statement* action178_Statement(SourceLoc loc, SourceLoc endloc, Statement* s);
  Statement* action179_Statement(SourceLoc loc, SourceLoc endloc, S_compound* s);
  Statement* action180_Statement(SourceLoc loc, SourceLoc endloc, Condition* e, Statement* s);
  Statement* action181_Statement(SourceLoc loc, SourceLoc endloc, Condition* e, Statement* s1, Statement* s2);
  Statement* action182_Statement(SourceLoc loc, SourceLoc endloc, Condition* e, Statement* s);
  Statement* action183_Statement(SourceLoc loc, SourceLoc endloc, Condition* e, Statement* s);
  Statement* action184_Statement(SourceLoc loc, SourceLoc endloc, Statement* s, Expression* e);
  Statement* action185_Statement(SourceLoc loc, SourceLoc endloc, Statement* s1, Condition* c, Expression* e, Statement* s2);
  Statement* action186_Statement(SourceLoc loc, SourceLoc endloc);
  Statement* action187_Statement(SourceLoc loc, SourceLoc endloc);
  Statement* action188_Statement(SourceLoc loc, SourceLoc endloc, Expression* e);
  Statement* action189_Statement(SourceLoc loc, SourceLoc endloc);
  Statement* action190_Statement(SourceLoc loc, SourceLoc endloc, StringRef n);
  Statement* action191_Statement(SourceLoc loc, SourceLoc endloc, Declaration* d);
  Statement* action192_Statement(SourceLoc loc, SourceLoc endloc, S_try* s);
  Statement* action193_Statement(SourceLoc loc, SourceLoc endloc, E_stringLit* a);
  Statement* action194_Statement(SourceLoc loc, SourceLoc endloc, NamespaceDecl* n);
  Statement* action195_Statement(SourceLoc loc, SourceLoc endloc, Function* f);
  Statement* action196_Statement(SourceLoc loc, SourceLoc endloc, Function* k);
  Statement* action197_Statement(SourceLoc loc, SourceLoc endloc, Expression* e, Expression* e2, Statement* s);
  Statement* action198_Statement(SourceLoc loc, SourceLoc endloc, Expression* e);
  Statement* action199_Statement(SourceLoc loc, SourceLoc endloc, UberModifiers m1, FakeList<Declarator>* list);
  Statement* action200_ExpressionStatement(SourceLoc loc, SourceLoc endloc);
  Statement* action201_ExpressionStatement(SourceLoc loc, SourceLoc endloc, Expression* e);
  S_compound* action202_CompoundStatement(SourceLoc loc, SourceLoc endloc, S_compound* seq);
  S_compound* action203_CompoundStatement(SourceLoc loc, SourceLoc endloc, S_compound* seq, Statement* lesl);
  S_compound* action204_CompoundStmtHelper(SourceLoc loc, SourceLoc endloc);
  S_compound* action205_CompoundStmtHelper(SourceLoc loc, SourceLoc endloc, S_compound* c, Statement* s);
  Condition* action206_Condition(SourceLoc loc, SourceLoc endloc, Expression* e);
  Condition* action207_Condition(SourceLoc loc, SourceLoc endloc, TypeSpecifier* spec, IDeclarator* decl, Expression* e);
  Condition* action208_ConditionOpt(SourceLoc loc, SourceLoc endloc);
  Condition* action209_ConditionOpt(SourceLoc loc, SourceLoc endloc, Condition* c);
  Statement* action210_ForInitStatement(SourceLoc loc, SourceLoc endloc, Statement* s);
  Statement* action211_ForInitStatement(SourceLoc loc, SourceLoc endloc, Declaration* s);
  TopForm* action212_Declaration(SourceLoc loc, SourceLoc endloc, Declaration* d);
  TopForm* action213_Declaration(SourceLoc loc, SourceLoc endloc, Function* f);
  TopForm* action214_Declaration(SourceLoc loc, SourceLoc endloc, TemplateDeclaration* t);
  TopForm* action215_Declaration(SourceLoc loc, SourceLoc endloc, TopForm* d);
  TopForm* action216_Declaration(SourceLoc loc, SourceLoc endloc, TopForm* s);
  TopForm* action217_Declaration(SourceLoc loc, SourceLoc endloc, E_stringLit* a);
  TopForm* action218_Declaration(SourceLoc loc, SourceLoc endloc, TF_namespaceDefn* n);
  TopForm* action219_Declaration(SourceLoc loc, SourceLoc endloc, NamespaceDecl* n);
  TopForm* action220_Declaration(SourceLoc loc, SourceLoc endloc, Function* k);
  TopForm* action221_Declaration(SourceLoc loc, SourceLoc endloc, Function* k);
  TopForm* action222_Declaration(SourceLoc loc, SourceLoc endloc, Function* f);
  TopForm* action223_Declaration(SourceLoc loc, SourceLoc endloc, UberModifiers m1, FakeList<Declarator>* list);
  Declaration* action224_BlockDeclaration(SourceLoc loc, SourceLoc endloc, Declaration* d);
  Declaration* action225_SimpleDeclaration(SourceLoc loc, SourceLoc endloc, Declaration* spec, FakeList<Declarator>* list);
  Declaration* action226_SimpleDeclaration(SourceLoc loc, SourceLoc endloc, Declaration* spec);
  Declaration* action227_DeclSpecifier(SourceLoc loc, SourceLoc endloc, PQName* n, UberModifiers m2);
  Declaration* action228_DeclSpecifier(SourceLoc loc, SourceLoc endloc, UberModifiers m1, PQName* n, UberModifiers m2);
  Declaration* action229_DeclSpecifier(SourceLoc loc, SourceLoc endloc, UberModifiers k1, UberModifiers m2);
  Declaration* action230_DeclSpecifier(SourceLoc loc, SourceLoc endloc, UberModifiers m1, UberModifiers k1, UberModifiers m2);
  Declaration* action231_DeclSpecifier(SourceLoc loc, SourceLoc endloc, TypeSpecifier* e, UberModifiers m2);
  Declaration* action232_DeclSpecifier(SourceLoc loc, SourceLoc endloc, UberModifiers m1, TypeSpecifier* e, UberModifiers m2);
  Declaration* action233_DeclSpecifier(SourceLoc loc, SourceLoc endloc, ASTTypeof* te, UberModifiers m2);
  Declaration* action234_DeclSpecifier(SourceLoc loc, SourceLoc endloc, UberModifiers m1, ASTTypeof* te, UberModifiers m2);
  Declaration* action235_DeclSpecifier(SourceLoc loc, SourceLoc endloc, PQName* n, UberModifiers m2);
  Declaration* action236_DeclSpecifier(SourceLoc loc, SourceLoc endloc, UberModifiers m1, PQName* n, UberModifiers m2);
  TypeSpecifier* action237_ElaboratedOrSpecifier(SourceLoc loc, SourceLoc endloc, TypeSpecifier* s);
  TypeSpecifier* action238_ElaboratedOrSpecifier(SourceLoc loc, SourceLoc endloc, TS_classSpec* s);
  TypeSpecifier* action239_ElaboratedOrSpecifier(SourceLoc loc, SourceLoc endloc, TS_enumSpec* s);
  UberModifiers action240_UberModifierSeq(SourceLoc loc, SourceLoc endloc, UberModifiers u);
  UberModifiers action241_UberModifierSeq(SourceLoc loc, SourceLoc endloc, UberModifiers s, UberModifiers u);
  UberModifiers action242_UberModifierSeqOpt(SourceLoc loc, SourceLoc endloc);
  UberModifiers action243_UberModifierSeqOpt(SourceLoc loc, SourceLoc endloc, UberModifiers s);
  UberModifiers action244_UberTypeAndModifierSeqOpt(SourceLoc loc, SourceLoc endloc);
  UberModifiers action245_UberTypeAndModifierSeqOpt(SourceLoc loc, SourceLoc endloc, UberModifiers s, UberModifiers u);
  UberModifiers action246_UberTypeAndModifierSeqOpt(SourceLoc loc, SourceLoc endloc, UberModifiers s, UberModifiers u);
  UberModifiers action247_UberCVQualifierSeq(SourceLoc loc, SourceLoc endloc, UberModifiers u);
  UberModifiers action248_UberCVQualifierSeq(SourceLoc loc, SourceLoc endloc, UberModifiers s, UberModifiers u);
  UberModifiers action249_UberCVQualifierSeqOpt(SourceLoc loc, SourceLoc endloc);
  UberModifiers action250_UberCVQualifierSeqOpt(SourceLoc loc, SourceLoc endloc, UberModifiers s);
  UberModifiers action251_UberTypeAndCVQualifierSeqOpt(SourceLoc loc, SourceLoc endloc);
  UberModifiers action252_UberTypeAndCVQualifierSeqOpt(SourceLoc loc, SourceLoc endloc, UberModifiers s, UberModifiers u);
  UberModifiers action253_UberTypeAndCVQualifierSeqOpt(SourceLoc loc, SourceLoc endloc, UberModifiers s, UberModifiers u);
  UberModifiers action254_UberModifier(SourceLoc loc, SourceLoc endloc);
  UberModifiers action255_UberModifier(SourceLoc loc, SourceLoc endloc);
  UberModifiers action256_UberModifier(SourceLoc loc, SourceLoc endloc);
  UberModifiers action257_UberModifier(SourceLoc loc, SourceLoc endloc);
  UberModifiers action258_UberModifier(SourceLoc loc, SourceLoc endloc);
  UberModifiers action259_UberModifier(SourceLoc loc, SourceLoc endloc);
  UberModifiers action260_UberModifier(SourceLoc loc, SourceLoc endloc);
  UberModifiers action261_UberModifier(SourceLoc loc, SourceLoc endloc);
  UberModifiers action262_UberModifier(SourceLoc loc, SourceLoc endloc);
  UberModifiers action263_UberModifier(SourceLoc loc, SourceLoc endloc);
  UberModifiers action264_UberModifier(SourceLoc loc, SourceLoc endloc);
  UberModifiers action265_UberModifier(SourceLoc loc, SourceLoc endloc);
  UberModifiers action266_UberModifier(SourceLoc loc, SourceLoc endloc);
  UberModifiers action267_UberCVQualifier(SourceLoc loc, SourceLoc endloc);
  UberModifiers action268_UberCVQualifier(SourceLoc loc, SourceLoc endloc);
  UberModifiers action269_UberCVQualifier(SourceLoc loc, SourceLoc endloc);
  UberModifiers action270_UberCVQualifier(SourceLoc loc, SourceLoc endloc);
  UberModifiers action271_UberTypeKeyword(SourceLoc loc, SourceLoc endloc);
  UberModifiers action272_UberTypeKeyword(SourceLoc loc, SourceLoc endloc);
  UberModifiers action273_UberTypeKeyword(SourceLoc loc, SourceLoc endloc);
  UberModifiers action274_UberTypeKeyword(SourceLoc loc, SourceLoc endloc);
  UberModifiers action275_UberTypeKeyword(SourceLoc loc, SourceLoc endloc);
  UberModifiers action276_UberTypeKeyword(SourceLoc loc, SourceLoc endloc);
  UberModifiers action277_UberTypeKeyword(SourceLoc loc, SourceLoc endloc);
  UberModifiers action278_UberTypeKeyword(SourceLoc loc, SourceLoc endloc);
  UberModifiers action279_UberTypeKeyword(SourceLoc loc, SourceLoc endloc);
  UberModifiers action280_UberTypeKeyword(SourceLoc loc, SourceLoc endloc);
  UberModifiers action281_UberTypeKeyword(SourceLoc loc, SourceLoc endloc);
  UberModifiers action282_UberTypeKeyword(SourceLoc loc, SourceLoc endloc);
  UberModifiers action283_UberTypeKeyword(SourceLoc loc, SourceLoc endloc);
  TypeSpecifier* action284_ElaboratedTypeSpecifier(SourceLoc loc, SourceLoc endloc, enum TypeIntr k, PQName* n);
  TypeSpecifier* action285_ElaboratedTypeSpecifier(SourceLoc loc, SourceLoc endloc, PQName* n);
  TypeSpecifier* action286_ElaboratedTypeSpecifier(SourceLoc loc, SourceLoc endloc, PQName* n);
  TypeSpecifier* action287_ElaboratedTypeSpecifier(SourceLoc loc, SourceLoc endloc, enum TypeIntr k, PQName* n);
  TypeSpecifier* action288_ElaboratedTypeSpecifier(SourceLoc loc, SourceLoc endloc, PQName* n);
  TypeSpecifier* action289_TypeSpecifier(SourceLoc loc, SourceLoc endloc, PQName* n, UberModifiers cv2);
  TypeSpecifier* action290_TypeSpecifier(SourceLoc loc, SourceLoc endloc, UberModifiers cv1, PQName* n, UberModifiers cv2);
  TypeSpecifier* action291_TypeSpecifier(SourceLoc loc, SourceLoc endloc, UberModifiers k1, UberModifiers m2);
  TypeSpecifier* action292_TypeSpecifier(SourceLoc loc, SourceLoc endloc, UberModifiers m1, UberModifiers k1, UberModifiers m2);
  TypeSpecifier* action293_TypeSpecifier(SourceLoc loc, SourceLoc endloc, TypeSpecifier* e, UberModifiers m2);
  TypeSpecifier* action294_TypeSpecifier(SourceLoc loc, SourceLoc endloc, UberModifiers m1, TypeSpecifier* e, UberModifiers m2);
  TypeSpecifier* action295_TypeSpecifier(SourceLoc loc, SourceLoc endloc, ASTTypeof* te, UberModifiers cv2);
  TypeSpecifier* action296_TypeSpecifier(SourceLoc loc, SourceLoc endloc, UberModifiers cv1, ASTTypeof* te, UberModifiers cv2);
  PQName* action297_PQTypeName(SourceLoc loc, SourceLoc endloc, PQName* n);
  PQName* action298_PQTypeName(SourceLoc loc, SourceLoc endloc, PQName* n);
  PQName* action299_PQTypeName_ncc(SourceLoc loc, SourceLoc endloc, StringRef n);
  PQName* action300_PQTypeName_ncc(SourceLoc loc, SourceLoc endloc, PQ_template* id);
  PQName* action301_PQTypeName_ncc(SourceLoc loc, SourceLoc endloc, StringRef q, PQName* n);
  PQName* action302_PQTypeName_ncc(SourceLoc loc, SourceLoc endloc, StringRef q, /*fakelist*/TemplateArgument* targs, PQName* n);
  PQName* action303_PQTypeName_notfirst(SourceLoc loc, SourceLoc endloc, PQName* id);
  PQName* action304_PQTypeName_notfirst(SourceLoc loc, SourceLoc endloc, PQ_template* id);
  PQName* action305_PQTypeName_notfirst(SourceLoc loc, SourceLoc endloc, StringRef q, /*fakelist*/TemplateArgument* targs, PQName* n);
  TS_enumSpec* action306_EnumSpecifier(SourceLoc loc, SourceLoc endloc, FakeList<Enumerator>* list);
  TS_enumSpec* action307_EnumSpecifier(SourceLoc loc, SourceLoc endloc, StringRef n, FakeList<Enumerator>* list);
  TS_enumSpec* action308_EnumSpecifier(SourceLoc loc, SourceLoc endloc, FakeList<Enumerator>* list);
  TS_enumSpec* action309_EnumSpecifier(SourceLoc loc, SourceLoc endloc, PQName* n, FakeList<Enumerator>* list);
  FakeList<Enumerator>* action310_EnumeratorListOpt(SourceLoc loc, SourceLoc endloc);
  FakeList<Enumerator>* action311_EnumeratorListOpt(SourceLoc loc, SourceLoc endloc, Enumerator* def);
  FakeList<Enumerator>* action312_EnumeratorListOpt(SourceLoc loc, SourceLoc endloc, Enumerator* def, FakeList<Enumerator>* list);
  Enumerator* action313_EnumeratorDefinition(SourceLoc loc, SourceLoc endloc, StringRef name);
  Enumerator* action314_EnumeratorDefinition(SourceLoc loc, SourceLoc endloc, StringRef name, Expression* expr);
  E_stringLit* action315_AsmDefinition(SourceLoc loc, SourceLoc endloc, E_stringLit* s);
  E_stringLit* action316_AsmDefinition(SourceLoc loc, SourceLoc endloc, enum CVFlags q, E_stringLit* s);
  E_stringLit* action317_AsmDefinition(SourceLoc loc, SourceLoc endloc, enum CVFlags q, E_stringLit* s, SemanticValue ocs);
  E_stringLit* action318_AsmDefinition(SourceLoc loc, SourceLoc endloc, E_stringLit* s, SemanticValue ocs);
  TopForm* action319_LinkageSpecification(SourceLoc loc, SourceLoc endloc, StringRef n, TranslationUnit* tu);
  TopForm* action320_LinkageSpecification(SourceLoc loc, SourceLoc endloc, StringRef n, TopForm* tf);
  FakeList<Declarator>* action321_InitDeclaratorList(SourceLoc loc, SourceLoc endloc, Declarator* d);
  FakeList<Declarator>* action322_InitDeclaratorList(SourceLoc loc, SourceLoc endloc, Declarator* d, FakeList<Declarator>* list);
  FakeList<Declarator>* action323_InitDeclaratorList(SourceLoc loc, SourceLoc endloc, Declarator* d, FakeList<Declarator>* list);
  Declarator* action324_InitDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d);
  Declarator* action325_InitDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d, Initializer* i);
  Initializer* action326_Initializer(SourceLoc loc, SourceLoc endloc, Initializer* i);
  Initializer* action327_Initializer(SourceLoc loc, SourceLoc endloc, FakeList<ArgExpression>* args);
  Initializer* action328_SimpleInitializerClause(SourceLoc loc, SourceLoc endloc, Expression* e);
  Initializer* action329_SimpleInitializerClause(SourceLoc loc, SourceLoc endloc, IN_compound* c);
  Initializer* action330_InitializerClause(SourceLoc loc, SourceLoc endloc, Initializer* init);
  Initializer* action331_InitializerClause(SourceLoc loc, SourceLoc endloc, StringRef d, Initializer* init);
  Initializer* action332_InitializerClause(SourceLoc loc, SourceLoc endloc, FakeList<Designator>* dl, Initializer* init);
  Initializer* action333_InitializerClause(SourceLoc loc, SourceLoc endloc, FakeList<Designator>* dl, Initializer* init);
  IN_compound* action334_CompoundInitializer(SourceLoc loc, SourceLoc endloc, IN_compound* list);
  IN_compound* action335_CompoundInitializer(SourceLoc loc, SourceLoc endloc);
  void action336_CommaOpt(SourceLoc loc, SourceLoc endloc);
  void action337_CommaOpt(SourceLoc loc, SourceLoc endloc);
  IN_compound* action338_InitializerList(SourceLoc loc, SourceLoc endloc, Initializer* init);
  IN_compound* action339_InitializerList(SourceLoc loc, SourceLoc endloc, IN_compound* list, Initializer* init);
  IDeclarator* action340_Declarator(SourceLoc loc, SourceLoc endloc, enum CVFlags cv, IDeclarator* d);
  IDeclarator* action341_Declarator(SourceLoc loc, SourceLoc endloc, enum CVFlags cv, IDeclarator* d);
  IDeclarator* action342_Declarator(SourceLoc loc, SourceLoc endloc, PQName* n, enum CVFlags cv, IDeclarator* d);
  IDeclarator* action343_Declarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d);
  IDeclarator* action344_Declarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d);
  IDeclarator* action345_Declarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d);
  IDeclarator* action346_Declarator(SourceLoc loc, SourceLoc endloc, enum CVFlags cv, enum CVFlags cv2, IDeclarator* d);
  IDeclarator* action347_Declarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d, AttributeSpecifierList* attr);
  IDeclarator* action348_DirectDeclarator(SourceLoc loc, SourceLoc endloc, PQName* n);
  IDeclarator* action349_DirectDeclarator(SourceLoc loc, SourceLoc endloc, PQName* n);
  IDeclarator* action350_DirectDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d, FakeList<ASTTypeId>* params, enum CVFlags cv, ExceptionSpec* e);
  IDeclarator* action351_DirectDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d, Expression* sz);
  IDeclarator* action352_DirectDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d);
  IDeclarator* action353_DirectDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d, enum CVFlags q);
  IDeclarator* action354_DirectDeclarator(SourceLoc loc, SourceLoc endloc, AttributeSpecifierList* attr, IDeclarator* d);
  PQName* action355_PQDtorName(SourceLoc loc, SourceLoc endloc, StringRef n);
  PQName* action356_PQDtorName(SourceLoc loc, SourceLoc endloc, StringRef n, /*fakelist*/TemplateArgument* list);
  PQName* action357_PQDtorName(SourceLoc loc, SourceLoc endloc, StringRef q, PQName* rhs);
  PQName* action358_PQDtorName(SourceLoc loc, SourceLoc endloc, StringRef q, /*fakelist*/TemplateArgument* targs, PQName* rhs);
  PQName* action359_PQDtorName(SourceLoc loc, SourceLoc endloc, StringRef q, /*fakelist*/TemplateArgument* targs, PQName* rhs);
  PQName* action360_PtrToMemberName(SourceLoc loc, SourceLoc endloc, PQName* n);
  enum CVFlags action361_CVQualifierSeqOpt(SourceLoc loc, SourceLoc endloc);
  enum CVFlags action362_CVQualifierSeqOpt(SourceLoc loc, SourceLoc endloc, enum CVFlags s);
  enum CVFlags action363_CVQualifierSeq(SourceLoc loc, SourceLoc endloc, enum CVFlags q);
  enum CVFlags action364_CVQualifierSeq(SourceLoc loc, SourceLoc endloc, enum CVFlags q, enum CVFlags s);
  enum CVFlags action365_CVQualifier(SourceLoc loc, SourceLoc endloc);
  enum CVFlags action366_CVQualifier(SourceLoc loc, SourceLoc endloc);
  enum CVFlags action367_CVQualifier(SourceLoc loc, SourceLoc endloc);
  ASTTypeId* action368_TypeId(SourceLoc loc, SourceLoc endloc, TypeSpecifier* spec, IDeclarator* decl);
  IDeclarator* action369_AbstractDeclaratorOpt(SourceLoc loc, SourceLoc endloc);
  IDeclarator* action370_AbstractDeclaratorOpt(SourceLoc loc, SourceLoc endloc, IDeclarator* d);
  IDeclarator* action371_AbstractDeclarator(SourceLoc loc, SourceLoc endloc, enum CVFlags cv, IDeclarator* d);
  IDeclarator* action372_AbstractDeclarator(SourceLoc loc, SourceLoc endloc, enum CVFlags cv, IDeclarator* d);
  IDeclarator* action373_AbstractDeclarator(SourceLoc loc, SourceLoc endloc, PQName* n, enum CVFlags cv, IDeclarator* d);
  IDeclarator* action374_AbstractDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d);
  IDeclarator* action375_AbstractDeclarator(SourceLoc loc, SourceLoc endloc, enum CVFlags cv, AttributeSpecifier* attrspec, enum CVFlags cv2, IDeclarator* d);
  IDeclarator* action376_AbstractDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d, AttributeSpecifierList* attr);
  IDeclarator* action377_DirectAbstractDeclaratorOpt(SourceLoc loc, SourceLoc endloc);
  IDeclarator* action378_DirectAbstractDeclaratorOpt(SourceLoc loc, SourceLoc endloc, IDeclarator* d);
  IDeclarator* action379_DirectAbstractDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d, FakeList<ASTTypeId>* args, enum CVFlags cv, ExceptionSpec* e);
  IDeclarator* action380_DirectAbstractDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d, Expression* sz);
  IDeclarator* action381_DirectAbstractDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d);
  IDeclarator* action382_DirectAbstractDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d, enum CVFlags q);
  IDeclarator* action383_DirectAbstractDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d);
  FakeList<ASTTypeId>* action384_ParameterDeclarationClause(SourceLoc loc, SourceLoc endloc, FakeList<ASTTypeId>* p);
  FakeList<ASTTypeId>* action385_ParameterDeclarationClause(SourceLoc loc, SourceLoc endloc);
  FakeList<ASTTypeId>* action386_ParameterDeclarationList(SourceLoc loc, SourceLoc endloc);
  FakeList<ASTTypeId>* action387_ParameterDeclarationList(SourceLoc loc, SourceLoc endloc, ASTTypeId* d);
  FakeList<ASTTypeId>* action388_ParameterDeclarationList(SourceLoc loc, SourceLoc endloc, ASTTypeId* d);
  FakeList<ASTTypeId>* action389_ParameterDeclarationList(SourceLoc loc, SourceLoc endloc, ASTTypeId* d, FakeList<ASTTypeId>* list);
  ASTTypeId* action390_ParameterDeclaration(SourceLoc loc, SourceLoc endloc, TypeSpecifier* s, Declarator* pd);
  ASTTypeId* action391_ParameterDeclaration(SourceLoc loc, SourceLoc endloc, TypeSpecifier* s, Declarator* pd);
  ASTTypeId* action392_ParameterDeclaration(SourceLoc loc, SourceLoc endloc, TypeSpecifier* s, Declarator* pd);
  ASTTypeId* action393_ParameterDeclaration(SourceLoc loc, SourceLoc endloc, IDeclarator* d);
  ASTTypeId* action394_ParameterDeclaration(SourceLoc loc, SourceLoc endloc, IDeclarator* d);
  Declarator* action395_ParameterDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d);
  Declarator* action396_ParameterDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d, Expression* e);
  Declarator* action397_ParameterDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d);
  Declarator* action398_ParameterDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d, Expression* e);
  Function* action399_FunctionDefinition(SourceLoc loc, SourceLoc endloc, Declaration* r, IDeclarator* d, S_compound* b);
  Function* action400_FunctionDefinition(SourceLoc loc, SourceLoc endloc, Declaration* r, IDeclarator* d, S_compound* b, FakeList<Handler>* h);
  Function* action401_FunctionDefinition(SourceLoc loc, SourceLoc endloc, DeclFlags m, IDeclarator* d, FakeList<MemberInit>* c, S_compound* b);
  Function* action402_FunctionDefinition(SourceLoc loc, SourceLoc endloc, IDeclarator* d, FakeList<MemberInit>* c, S_compound* b);
  Function* action403_FunctionDefinition(SourceLoc loc, SourceLoc endloc, DeclFlags e, IDeclarator* d, FakeList<MemberInit>* c, S_compound* b, FakeList<Handler>* h);
  Function* action404_FunctionDefinition(SourceLoc loc, SourceLoc endloc, IDeclarator* d, FakeList<MemberInit>* c, S_compound* b, FakeList<Handler>* h);
  IDeclarator* action405_FDDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d);
  S_compound* action406_FunctionBody(SourceLoc loc, SourceLoc endloc, S_compound* s);
  FakeList<MemberInit>* action407_CtorInitializerOpt(SourceLoc loc, SourceLoc endloc);
  FakeList<MemberInit>* action408_CtorInitializerOpt(SourceLoc loc, SourceLoc endloc, FakeList<MemberInit>* list);
  TS_classSpec* action409_ClassSpecifier(SourceLoc loc, SourceLoc endloc, enum TypeIntr k, PQName* n, FakeList<BaseClassSpec>* b, MemberList* memb);
  TS_classSpec* action410_ClassSpecifier(SourceLoc loc, SourceLoc endloc, enum TypeIntr k, AttributeSpecifierList* as, PQName* n, FakeList<BaseClassSpec>* b, MemberList* memb);
  PQName* action411_ClassHeadNameOpt(SourceLoc loc, SourceLoc endloc);
  PQName* action412_ClassHeadNameOpt(SourceLoc loc, SourceLoc endloc, PQName* n);
  PQName* action413_ClassHeadName(SourceLoc loc, SourceLoc endloc, StringRef n);
  PQName* action414_ClassHeadName(SourceLoc loc, SourceLoc endloc, PQ_template* t);
  PQName* action415_ClassHeadName(SourceLoc loc, SourceLoc endloc, StringRef n, PQName* rest);
  PQName* action416_ClassHeadName(SourceLoc loc, SourceLoc endloc, StringRef n, /*fakelist*/TemplateArgument* targs, PQName* rest);
  PQName* action417_ClassHeadName(SourceLoc loc, SourceLoc endloc, StringRef n, /*fakelist*/TemplateArgument* targs, PQName* rest);
  enum TypeIntr action418_ClassKey(SourceLoc loc, SourceLoc endloc);
  enum TypeIntr action419_ClassKey(SourceLoc loc, SourceLoc endloc);
  enum TypeIntr action420_ClassKey(SourceLoc loc, SourceLoc endloc);
  MemberList* action421_MemberDeclarationSeqOpt(SourceLoc loc, SourceLoc endloc);
  MemberList* action422_MemberDeclarationSeqOpt(SourceLoc loc, SourceLoc endloc, MemberList* list);
  MemberList* action423_MemberDeclarationSeqOpt(SourceLoc loc, SourceLoc endloc, MemberList* list, Member* decl);
  MemberList* action424_MemberDeclarationSeqOpt(SourceLoc loc, SourceLoc endloc, MemberList* list, AccessKeyword k);
  AccessKeyword action425_AccessSpecifier(SourceLoc loc, SourceLoc endloc);
  AccessKeyword action426_AccessSpecifier(SourceLoc loc, SourceLoc endloc);
  AccessKeyword action427_AccessSpecifier(SourceLoc loc, SourceLoc endloc);
  Member* action428_MemberDeclaration(SourceLoc loc, SourceLoc endloc, Declaration* spec, FakeList<Declarator>* list);
  Member* action429_MemberDeclaration(SourceLoc loc, SourceLoc endloc, Declaration* spec);
  Member* action430_MemberDeclaration(SourceLoc loc, SourceLoc endloc, PQName* n);
  Member* action431_MemberDeclaration(SourceLoc loc, SourceLoc endloc, PQName* n);
  Member* action432_MemberDeclaration(SourceLoc loc, SourceLoc endloc, Function* f);
  Member* action433_MemberDeclaration(SourceLoc loc, SourceLoc endloc, Declaration* d);
  Member* action434_MemberDeclaration(SourceLoc loc, SourceLoc endloc, TemplateDeclaration* d);
  Declaration* action435_CDtorProtoDecl(SourceLoc loc, SourceLoc endloc, DeclFlags flags, Declarator* d);
  Declaration* action436_CDtorProtoDecl(SourceLoc loc, SourceLoc endloc, Declarator* d);
  FakeList<Declarator>* action437_MemberDeclaratorList(SourceLoc loc, SourceLoc endloc, Declarator* d);
  FakeList<Declarator>* action438_MemberDeclaratorList(SourceLoc loc, SourceLoc endloc, Declarator* d, FakeList<Declarator>* list);
  Declarator* action439_MemberDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d);
  Declarator* action440_MemberDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d, Expression* e);
  Declarator* action441_MemberDeclarator(SourceLoc loc, SourceLoc endloc, StringRef n, Expression* e);
  Declarator* action442_MemberDeclarator(SourceLoc loc, SourceLoc endloc, StringRef n, Expression* e);
  StringRef action443_IdentifierOpt(SourceLoc loc, SourceLoc endloc);
  StringRef action444_IdentifierOpt(SourceLoc loc, SourceLoc endloc, StringRef n);
  DeclFlags action445_CDtorModifier(SourceLoc loc, SourceLoc endloc);
  DeclFlags action446_CDtorModifier(SourceLoc loc, SourceLoc endloc);
  DeclFlags action447_CDtorModifier(SourceLoc loc, SourceLoc endloc);
  DeclFlags action448_CDtorModifier(SourceLoc loc, SourceLoc endloc);
  DeclFlags action449_CDtorModifier(SourceLoc loc, SourceLoc endloc);
  DeclFlags action450_CDtorModifierSeq(SourceLoc loc, SourceLoc endloc, DeclFlags m);
  DeclFlags action451_CDtorModifierSeq(SourceLoc loc, SourceLoc endloc, DeclFlags s, DeclFlags m);
  FakeList<BaseClassSpec>* action452_BaseClauseOpt(SourceLoc loc, SourceLoc endloc);
  FakeList<BaseClassSpec>* action453_BaseClauseOpt(SourceLoc loc, SourceLoc endloc, FakeList<BaseClassSpec>* b);
  FakeList<BaseClassSpec>* action454_BaseSpecifierList(SourceLoc loc, SourceLoc endloc, BaseClassSpec* b);
  FakeList<BaseClassSpec>* action455_BaseSpecifierList(SourceLoc loc, SourceLoc endloc, BaseClassSpec* b, FakeList<BaseClassSpec>* list);
  BaseClassSpec* action456_BaseSpecifier(SourceLoc loc, SourceLoc endloc, PQName* n);
  BaseClassSpec* action457_BaseSpecifier(SourceLoc loc, SourceLoc endloc, AccessKeyword a, PQName* n);
  BaseClassSpec* action458_BaseSpecifier(SourceLoc loc, SourceLoc endloc, AccessKeyword a, bool v, PQName* n);
  bool action459_VirtualOpt(SourceLoc loc, SourceLoc endloc);
  bool action460_VirtualOpt(SourceLoc loc, SourceLoc endloc);
  AccessKeyword action461_AccessSpecifierOpt(SourceLoc loc, SourceLoc endloc);
  AccessKeyword action462_AccessSpecifierOpt(SourceLoc loc, SourceLoc endloc, AccessKeyword k);
  PQName* action463_PQClassName(SourceLoc loc, SourceLoc endloc, PQName* n);
  OperatorName* action464_ConversionFunctionId(SourceLoc loc, SourceLoc endloc, ASTTypeId* t);
  ASTTypeId* action465_ConversionTypeId(SourceLoc loc, SourceLoc endloc, TypeSpecifier* s, IDeclarator* d);
  IDeclarator* action466_ConversionDeclaratorOpt(SourceLoc loc, SourceLoc endloc);
  IDeclarator* action467_ConversionDeclaratorOpt(SourceLoc loc, SourceLoc endloc, enum CVFlags cv, IDeclarator* d);
  IDeclarator* action468_ConversionDeclaratorOpt(SourceLoc loc, SourceLoc endloc, enum CVFlags cv, IDeclarator* d);
  IDeclarator* action469_ConversionDeclaratorOpt(SourceLoc loc, SourceLoc endloc, PQName* n, enum CVFlags cv, IDeclarator* d);
  FakeList<MemberInit>* action470_MemInitializerList(SourceLoc loc, SourceLoc endloc, MemberInit* i);
  FakeList<MemberInit>* action471_MemInitializerList(SourceLoc loc, SourceLoc endloc, MemberInit* i, FakeList<MemberInit>* list);
  MemberInit* action472_MemInitializer(SourceLoc loc, SourceLoc endloc, PQName* n, FakeList<ArgExpression>* e);
  PQName* action473_MemInitializerId(SourceLoc loc, SourceLoc endloc, PQName* n);
  OperatorName* action474_OperatorFunctionId(SourceLoc loc, SourceLoc endloc, OperatorName* od);
  OperatorName* action475_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action476_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action477_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action478_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action479_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action480_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action481_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action482_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action483_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action484_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action485_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action486_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action487_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action488_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action489_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action490_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action491_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action492_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action493_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action494_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action495_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action496_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action497_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action498_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action499_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action500_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action501_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action502_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action503_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action504_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action505_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action506_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action507_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action508_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action509_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action510_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action511_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action512_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action513_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action514_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action515_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action516_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action517_Operator(SourceLoc loc, SourceLoc endloc);
  OperatorName* action518_Operator(SourceLoc loc, SourceLoc endloc);
  TemplateDeclaration* action519_TemplateDeclaration(SourceLoc loc, SourceLoc endloc, /*fakelist*/TemplateParameter* plist, Function* def);
  TemplateDeclaration* action520_TemplateDeclaration(SourceLoc loc, SourceLoc endloc, /*fakelist*/TemplateParameter* plist, Declaration* d);
  TemplateDeclaration* action521_TemplateDeclaration(SourceLoc loc, SourceLoc endloc, /*fakelist*/TemplateParameter* plist, TemplateDeclaration* td);
  TemplateDeclaration* action522_TemplateDeclaration(SourceLoc loc, SourceLoc endloc, /*fakelist*/TemplateParameter* plist, Declaration* d);
  /*fakelist*/TemplateParameter* action523_TemplatePreamble(SourceLoc loc, SourceLoc endloc, /*fakelist*/TemplateParameter* plist);
  /*fakelist*/TemplateParameter* action524_TemplatePreamble(SourceLoc loc, SourceLoc endloc, /*fakelist*/TemplateParameter* plist);
  /*fakelist*/TemplateParameter* action525_TemplatePreamble(SourceLoc loc, SourceLoc endloc);
  /*fakelist*/TemplateParameter* action526_TemplatePreamble(SourceLoc loc, SourceLoc endloc);
  /*fakelist*/TemplateParameter* action527_TemplateParameterList(SourceLoc loc, SourceLoc endloc, StringRef i, ASTTypeId* t, /*nullable fakelist*/TemplateParameter* next);
  /*fakelist*/TemplateParameter* action528_TemplateParameterList(SourceLoc loc, SourceLoc endloc, ASTTypeId* p, /*nullable fakelist*/TemplateParameter* next);
  /*fakelist*/TemplateParameter* action529_TemplateParameterList(SourceLoc loc, SourceLoc endloc, /*fakelist*/TemplateParameter* pl, StringRef i, PQName* t, /*nullable fakelist*/TemplateParameter* next);
  /*nullable fakelist*/TemplateParameter* action530_TemplateParameterListContinuation(SourceLoc loc, SourceLoc endloc);
  /*nullable fakelist*/TemplateParameter* action531_TemplateParameterListContinuation(SourceLoc loc, SourceLoc endloc, /*fakelist*/TemplateParameter* next);
  void action532_ClassOrTypename(SourceLoc loc, SourceLoc endloc);
  void action533_ClassOrTypename(SourceLoc loc, SourceLoc endloc);
  ASTTypeId* action534_DefaultTypeOpt(SourceLoc loc, SourceLoc endloc);
  ASTTypeId* action535_DefaultTypeOpt(SourceLoc loc, SourceLoc endloc, ASTTypeId* t);
  PQName* action536_DefaultTemplateOpt(SourceLoc loc, SourceLoc endloc);
  PQName* action537_DefaultTemplateOpt(SourceLoc loc, SourceLoc endloc, PQName* t);
  /*fakelist*/TemplateArgument* action538_TemplateArgumentListOpt(SourceLoc loc, SourceLoc endloc);
  /*fakelist*/TemplateArgument* action539_TemplateArgumentListOpt(SourceLoc loc, SourceLoc endloc, /*fakelist*/TemplateArgument* list);
  PQ_template* action540_TemplateId(SourceLoc loc, SourceLoc endloc, StringRef n, /*fakelist*/TemplateArgument* list);
  PQ_template* action541_TemplateId(SourceLoc loc, SourceLoc endloc, OperatorName* on, /*fakelist*/TemplateArgument* list);
  /*fakelist*/TemplateArgument* action542_TemplateArgumentList(SourceLoc loc, SourceLoc endloc, TemplateArgument* a);
  TemplateArgument* action543_TemplateArgumentListTailOpt(SourceLoc loc, SourceLoc endloc);
  TemplateArgument* action544_TemplateArgumentListTailOpt(SourceLoc loc, SourceLoc endloc, TemplateArgument* a);
  TemplateArgument* action545_TemplateArgument(SourceLoc loc, SourceLoc endloc, ASTTypeId* type, TemplateArgument* tail);
  TemplateArgument* action546_TemplateArgument(SourceLoc loc, SourceLoc endloc, Expression* e, TemplateArgument* tail);
  TopForm* action547_ExplicitInstantiation(SourceLoc loc, SourceLoc endloc, Declaration* d);
  TopForm* action548_ExplicitInstantiation(SourceLoc loc, SourceLoc endloc, Declaration* d);
  TopForm* action549_ExplicitInstantiation(SourceLoc loc, SourceLoc endloc, Declaration* d);
  S_try* action550_TryBlock(SourceLoc loc, SourceLoc endloc, S_compound* s, FakeList<Handler>* h);
  FakeList<Handler>* action551_HandlerSeq(SourceLoc loc, SourceLoc endloc, Handler* h);
  FakeList<Handler>* action552_HandlerSeq(SourceLoc loc, SourceLoc endloc, Handler* h, FakeList<Handler>* seq);
  Handler* action553_Handler(SourceLoc loc, SourceLoc endloc, ASTTypeId* d, S_compound* s);
  Handler* action554_Handler(SourceLoc loc, SourceLoc endloc, S_compound* s);
  ASTTypeId* action555_HandlerParameter(SourceLoc loc, SourceLoc endloc, TypeSpecifier* s, IDeclarator* d);
  ASTTypeId* action556_HandlerParameter(SourceLoc loc, SourceLoc endloc, TypeSpecifier* s, IDeclarator* d);
  IDeclarator* action557_UnqualifiedDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d);
  E_throw* action558_ThrowExpression(SourceLoc loc, SourceLoc endloc);
  E_throw* action559_ThrowExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  ExceptionSpec* action560_ExceptionSpecificationOpt(SourceLoc loc, SourceLoc endloc);
  ExceptionSpec* action561_ExceptionSpecificationOpt(SourceLoc loc, SourceLoc endloc);
  ExceptionSpec* action562_ExceptionSpecificationOpt(SourceLoc loc, SourceLoc endloc, FakeList<ASTTypeId>* list);
  FakeList<ASTTypeId>* action563_TypeIdList(SourceLoc loc, SourceLoc endloc, ASTTypeId* t);
  FakeList<ASTTypeId>* action564_TypeIdList(SourceLoc loc, SourceLoc endloc, ASTTypeId* t, FakeList<ASTTypeId>* list);
  TF_namespaceDefn* action565_NamespaceDefinition(SourceLoc loc, SourceLoc endloc, StringRef n, TranslationUnit* unit);
  TF_namespaceDefn* action566_NamespaceDefinition(SourceLoc loc, SourceLoc endloc, StringRef n, TranslationUnit* unit);
  NamespaceDecl* action567_NamespaceDecl(SourceLoc loc, SourceLoc endloc, StringRef alias, PQName* orig);
  NamespaceDecl* action568_NamespaceDecl(SourceLoc loc, SourceLoc endloc, PQName* n);
  NamespaceDecl* action569_NamespaceDecl(SourceLoc loc, SourceLoc endloc, PQName* n);
  NamespaceDecl* action570_NamespaceDecl(SourceLoc loc, SourceLoc endloc, PQName* n);
  Expression* action571_NamesAfterDot(SourceLoc loc, SourceLoc endloc, PQName* n);
  Expression* action572_NamesAfterDot(SourceLoc loc, SourceLoc endloc, Expression* n, PQName* n2);
  Expression* action573_NamesAfterDot(SourceLoc loc, SourceLoc endloc, Expression* n, Expression* e);
  Expression* action574_ParenthesizedExpression(SourceLoc loc, SourceLoc endloc, Expression* e);
  Statement* action575_LabeledEmptyStatementList(SourceLoc loc, SourceLoc endloc, StringRef n, Statement* s);
  Statement* action576_LabeledEmptyStatementList(SourceLoc loc, SourceLoc endloc, Expression* e, Statement* s);
  Statement* action577_LabeledEmptyStatementList(SourceLoc loc, SourceLoc endloc, Expression* e, Expression* e2, Statement* s);
  Statement* action578_LabeledEmptyStatementList(SourceLoc loc, SourceLoc endloc, Statement* s);
  Statement* action579_LabeledEmptyStatementListOpt(SourceLoc loc, SourceLoc endloc);
  Statement* action580_LabeledEmptyStatementListOpt(SourceLoc loc, SourceLoc endloc, Statement* s);
  ASTTypeof* action581_TypeofTypeSpecifier(SourceLoc loc, SourceLoc endloc, FullExpression* e);
  ASTTypeof* action582_TypeofTypeSpecifier(SourceLoc loc, SourceLoc endloc, ASTTypeId* t);
  FullExpression* action583_TypeofExpr(SourceLoc loc, SourceLoc endloc, Expression* e);
  ASTTypeId* action584_TypeofType(SourceLoc loc, SourceLoc endloc, ASTTypeId* t);
  void action585_BracketedWordOpt(SourceLoc loc, SourceLoc endloc);
  void action586_BracketedWordOpt(SourceLoc loc, SourceLoc endloc, StringRef id);
  void action587_ParenthesizedExpressionOpt(SourceLoc loc, SourceLoc endloc);
  void action588_ParenthesizedExpressionOpt(SourceLoc loc, SourceLoc endloc, Expression* e);
  void action589_OpConstraint(SourceLoc loc, SourceLoc endloc, SemanticValue name, E_stringLit* constr, SemanticValue e);
  void action590_OpConstraintList(SourceLoc loc, SourceLoc endloc);
  void action591_OpConstraintList(SourceLoc loc, SourceLoc endloc, SemanticValue oc);
  void action592_OpConstraintList(SourceLoc loc, SourceLoc endloc, SemanticValue oc, SemanticValue ocl);
  void action593_OpConstraints(SourceLoc loc, SourceLoc endloc);
  void action594_OpConstraints(SourceLoc loc, SourceLoc endloc);
  void action595_NonemptyOpConstraints(SourceLoc loc, SourceLoc endloc, SemanticValue ocs, SemanticValue ocl);
  void action596_NonemptyOpConstraints(SourceLoc loc, SourceLoc endloc, SemanticValue ocs, SemanticValue ocl);
  FakeList<Designator>* action597_DesignatorList(SourceLoc loc, SourceLoc endloc, Designator* d);
  FakeList<Designator>* action598_DesignatorList(SourceLoc loc, SourceLoc endloc, Designator* d, FakeList<Designator>* dl);
  Designator* action599_Designator(SourceLoc loc, SourceLoc endloc, StringRef id);
  Designator* action600_Designator(SourceLoc loc, SourceLoc endloc, Expression* idx_expr);
  Designator* action601_Designator(SourceLoc loc, SourceLoc endloc, Expression* idx_expr, Expression* idx_expr2);
  void action602_BuggyGccTypeModifier(SourceLoc loc, SourceLoc endloc);
  void action603_BuggyGccTypeModifier(SourceLoc loc, SourceLoc endloc);
  void action604_BuggyGccTypeModifier(SourceLoc loc, SourceLoc endloc);
  void action605_BuggyGccTypeModifier(SourceLoc loc, SourceLoc endloc);
  void action606_BuggyGccTypeModifier(SourceLoc loc, SourceLoc endloc);
  void action607_BuggyGccTypeModifier(SourceLoc loc, SourceLoc endloc);
  void action608_BuggyGccTypeModifier(SourceLoc loc, SourceLoc endloc);
  void action609_BuggyGccTypeModifier(SourceLoc loc, SourceLoc endloc);
  enum CVFlags action610_CVQualAttrSeqOpt(SourceLoc loc, SourceLoc endloc);
  enum CVFlags action611_CVQualAttrSeqOpt(SourceLoc loc, SourceLoc endloc, enum CVFlags s);
  enum CVFlags action612_CVQualAttrSeq(SourceLoc loc, SourceLoc endloc, enum CVFlags q);
  enum CVFlags action613_CVQualAttrSeq(SourceLoc loc, SourceLoc endloc, enum CVFlags q, enum CVFlags s);
  enum CVFlags action614_CVQualAttr(SourceLoc loc, SourceLoc endloc, enum CVFlags q);
  enum CVFlags action615_CVQualAttr(SourceLoc loc, SourceLoc endloc);
  StringRef action616_AttributeWord(SourceLoc loc, SourceLoc endloc, StringRef n);
  StringRef action617_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action618_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action619_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action620_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action621_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action622_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action623_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action624_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action625_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action626_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action627_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action628_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action629_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action630_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action631_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action632_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action633_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action634_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action635_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action636_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action637_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action638_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action639_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action640_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action641_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action642_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action643_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action644_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action645_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action646_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action647_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action648_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action649_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action650_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action651_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action652_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action653_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action654_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action655_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action656_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action657_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action658_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action659_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action660_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action661_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action662_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action663_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action664_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action665_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action666_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action667_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action668_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action669_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action670_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action671_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action672_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action673_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action674_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action675_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action676_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action677_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action678_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action679_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action680_AttributeWord(SourceLoc loc, SourceLoc endloc);
  StringRef action681_AttributeWord(SourceLoc loc, SourceLoc endloc);
  FakeList<ArgExpression>* action682_CommaSepExpressionListOpt(SourceLoc loc, SourceLoc endloc);
  FakeList<ArgExpression>* action683_CommaSepExpressionListOpt(SourceLoc loc, SourceLoc endloc, FakeList<ArgExpression>* el);
  FakeList<ArgExpression>* action684_AttributeParameters(SourceLoc loc, SourceLoc endloc, FakeList<ArgExpression>* exprs);
  Attribute* action685_Attribute(SourceLoc loc, SourceLoc endloc);
  Attribute* action686_Attribute(SourceLoc loc, SourceLoc endloc, StringRef w);
  Attribute* action687_Attribute(SourceLoc loc, SourceLoc endloc, StringRef w, FakeList<ArgExpression>* ap);
  AttributeSpecifier* action688_AttributeList(SourceLoc loc, SourceLoc endloc, Attribute* at);
  AttributeSpecifier* action689_AttributeList(SourceLoc loc, SourceLoc endloc, Attribute* at, AttributeSpecifier* ap);
  AttributeSpecifier* action690_AttributeSpecifier(SourceLoc loc, SourceLoc endloc, AttributeSpecifier* ap);
  AttributeSpecifierList* action691_AttributeSpecifierList(SourceLoc loc, SourceLoc endloc, AttributeSpecifier* as);
  AttributeSpecifierList* action692_AttributeSpecifierList(SourceLoc loc, SourceLoc endloc, AttributeSpecifier* as, AttributeSpecifierList* asl);
  Function* action693_KandRFunctionDefinition(SourceLoc loc, SourceLoc endloc, Declaration* rds, IDeclarator* id, S_compound* ds, S_compound* b);
  Function* action694_KandRFunctionDefinition_implInt(SourceLoc loc, SourceLoc endloc, IDeclarator* id, S_compound* ds, S_compound* b);
  Function* action695_KandRFunctionDefinition_implInt(SourceLoc loc, SourceLoc endloc, UberModifiers m, IDeclarator* id, S_compound* ds, S_compound* b);
  S_compound* action696_KandRSimpleDeclarationSeq(SourceLoc loc, SourceLoc endloc, Declaration* s);
  S_compound* action697_KandRSimpleDeclarationSeq(SourceLoc loc, SourceLoc endloc, S_compound* c, Declaration* s);
  Declaration* action698_KandRSimpleDeclaration(SourceLoc loc, SourceLoc endloc, Declaration* spec, FakeList<Declarator>* list);
  Declaration* action699_KandRSimpleDeclaration(SourceLoc loc, SourceLoc endloc, FakeList<Declarator>* list);
  FakeList<Declarator>* action700_KandRInitDeclaratorList(SourceLoc loc, SourceLoc endloc, Declarator* d);
  FakeList<Declarator>* action701_KandRInitDeclaratorList(SourceLoc loc, SourceLoc endloc, Declarator* d, FakeList<Declarator>* list);
  Declarator* action702_KandRInitDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d);
  IDeclarator* action703_KandRDeclarator(SourceLoc loc, SourceLoc endloc, enum CVFlags cv, IDeclarator* d);
  IDeclarator* action704_KandRDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d);
  IDeclarator* action705_KandRDirectDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d, FakeList<PQ_name>* kAndR_params);
  IDeclarator* action706_KandRDirectDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d, FakeList<PQ_name>* kAndR_params);
  IDeclarator* action707_KandRDirectDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d, FakeList<ASTTypeId>* params);
  IDeclarator* action708_KandRDirectDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d, Expression* sz);
  IDeclarator* action709_KandRDirectDeclarator(SourceLoc loc, SourceLoc endloc, IDeclarator* d);
  IDeclarator* action710_KandRIdExpression(SourceLoc loc, SourceLoc endloc, PQ_name* n);
  FakeList<PQ_name>* action711_KandRIdentifierList(SourceLoc loc, SourceLoc endloc, PQ_name* i);
  FakeList<PQ_name>* action712_KandRIdentifierList(SourceLoc loc, SourceLoc endloc, PQ_name* i, FakeList<PQ_name>* e);
  PQ_name* action713_KandRIdentifier(SourceLoc loc, SourceLoc endloc, StringRef i);
  UberModifiers action714_CFuncModifier_no_inline(SourceLoc loc, SourceLoc endloc);
  UberModifiers action715_CFuncModifier_no_inline(SourceLoc loc, SourceLoc endloc);
  UberModifiers action716_CFuncModifier_no_inline(SourceLoc loc, SourceLoc endloc);
  UberModifiers action717_CFuncModifier_no_inline(SourceLoc loc, SourceLoc endloc);
  UberModifiers action718_CFuncModifier(SourceLoc loc, SourceLoc endloc, UberModifiers m);
  UberModifiers action719_CFuncModifier(SourceLoc loc, SourceLoc endloc);
  UberModifiers action720_CFuncModifierSeq(SourceLoc loc, SourceLoc endloc, UberModifiers m);
  UberModifiers action721_CFuncModifierSeq(SourceLoc loc, SourceLoc endloc, UberModifiers s, UberModifiers m);
  UberModifiers action722_CFuncModifierSeqOpt(SourceLoc loc, SourceLoc endloc);
  UberModifiers action723_CFuncModifierSeqOpt(SourceLoc loc, SourceLoc endloc, UberModifiers m);
  Function* action724_ImplIntFunctionDefinition(SourceLoc loc, SourceLoc endloc, UberModifiers m, IDeclarator* d, S_compound* b);
  Function* action725_ImplIntFunctionDefinition(SourceLoc loc, SourceLoc endloc, UberModifiers m1, UberModifiers m2, IDeclarator* d, S_compound* b);
  Function* action726_ImplIntFunctionDefinition(SourceLoc loc, SourceLoc endloc, UberModifiers m1, UberModifiers m2, IDeclarator* d, S_compound* b);
  TypeSpecifier* action727_ImplicitIntTypeSpecifier(SourceLoc loc, SourceLoc endloc, UberModifiers m);
  ASTTypeId* action728_ImplicitIntTypeId(SourceLoc loc, SourceLoc endloc, TypeSpecifier* spec);
  inline StringRef dup_Identifier(StringRef n) ;
  inline void del_Identifier(StringRef n) ;
  inline TranslationUnit* dup_TranslationUnit(TranslationUnit* n) ;
  inline PQName* merge_IdExpression(PQName* L, PQName* R) ;
  inline PQName* merge_UnqualifiedId(PQName* L, PQName* R) ;
  inline PQName* merge_PQualifiedId(PQName* L, PQName* R) ;
  inline Expression* merge_PostfixExpression(Expression* L, Expression* R) ;
  inline FakeList<ArgExpression>* merge_ExpressionList(FakeList<ArgExpression>* L, FakeList<ArgExpression>* R) ;
  inline Expression* merge_UnaryExpression(Expression* L, Expression* R) ;
  inline E_new* merge_NewExpression(E_new* L, E_new* R) ;
  inline bool keep_DirectNewDeclarator(IDeclarator* x) ;
  inline PQName* merge_NameAfterDot(PQName* L, PQName* R) ;
  inline PQName* merge_NAD1(PQName* L, PQName* R) ;
  inline PQName* merge_NAD2(PQName* L, PQName* R) ;
  inline Expression* merge_CastExpression(Expression* L, Expression* R) ;
  inline Expression* merge_BinExp_high(Expression* L, Expression* R) ;
  inline Expression* merge_BinExp_mid(Expression* L, Expression* R) ;
  inline Expression* merge_BinaryExpression(Expression* L, Expression* R) ;
  inline Expression* merge_ConditionalExpression(Expression* L, Expression* R) ;
  inline Expression* merge_Expression(Expression* L, Expression* R) ;
  inline Statement* merge_Statement(Statement* L, Statement* R) ;
  inline bool keep_Statement(Statement* x) ;
  inline Condition* merge_Condition(Condition* L, Condition* R) ;
  inline Statement* merge_ForInitStatement(Statement* L, Statement* R) ;
  inline TopForm* merge_Declaration(TopForm* L, TopForm* R) ;
  inline bool keep_Declaration(TopForm* x) ;
  inline bool keep_SimpleDeclaration(Declaration* d) ;
  inline Declaration* dup_DeclSpecifier(Declaration* d) ;
  inline PQName* merge_PQTypeName(PQName* L, PQName* R) ;
  inline PQName* merge_PQTypeName_ncc(PQName* L, PQName* R) ;
  inline PQName* merge_PQTypeName_notfirst(PQName* L, PQName* R) ;
  inline Declarator* merge_InitDeclarator(Declarator* L, Declarator* R) ;
  inline IN_compound* dup_InitializerList(IN_compound* i) ;
  inline bool keep_DirectDeclarator(IDeclarator* x) ;
  inline PQName* merge_PQDtorName(PQName* L, PQName* R) ;
  inline PQName* merge_PtrToMemberName(PQName* L, PQName* R) ;
  inline bool keep_DirectAbstractDeclarator(IDeclarator* x) ;
  inline ASTTypeId* merge_ParameterDeclaration(ASTTypeId* L, ASTTypeId* R) ;
  inline bool keep_ParameterDeclaration(ASTTypeId* x) ;
  inline Declarator* merge_ParameterDeclarator(Declarator* L, Declarator* R) ;
  inline bool keep_FunctionDefinition(Function* f) ;
  inline bool keep_FDDeclarator(IDeclarator* d) ;
  inline PQName* merge_ClassHeadNameOpt(PQName* L, PQName* R) ;
  inline PQName* merge_ClassHeadName(PQName* L, PQName* R) ;
  inline MemberList* dup_MemberDeclarationSeqOpt(MemberList* m) ;
  inline bool keep_MemberDeclaration(Member* m) ;
  inline bool keep_CDtorProtoDecl(Declaration* m) ;
  inline PQName* merge_PQClassName(PQName* L, PQName* R) ;
  inline bool keep_TemplateDeclaration(TemplateDeclaration* d) ;
  inline /*fakelist*/TemplateParameter* merge_TemplateParameterList(/*fakelist*/TemplateParameter* L, /*fakelist*/TemplateParameter* R) ;
  inline bool keep_TemplateParameterList(/*fakelist*/TemplateParameter* x) ;
  inline /*nullable fakelist*/TemplateParameter* merge_TemplateParameterListContinuation(/*nullable fakelist*/TemplateParameter* L, /*nullable fakelist*/TemplateParameter* R) ;
  inline TemplateArgument* merge_TemplateArgument(TemplateArgument* L, TemplateArgument* R) ;
  inline bool keep_TemplateArgument(TemplateArgument* n) ;
  inline bool keep_UnqualifiedDeclarator(IDeclarator* d) ;
  inline ASTTypeof* merge_TypeofTypeSpecifier(ASTTypeof* L, ASTTypeof* R) ;
  inline bool keep_KandRSimpleDeclaration(Declaration* x) ;
  inline Declarator* merge_KandRInitDeclarator(Declarator* L, Declarator* R) ;
  inline bool keep_KandRDirectDeclarator(IDeclarator* x) ;

// the function which makes the parse tables
public:
  virtual ParseTables *makeTables();
};

#endif // CC_GR_GEN_H
