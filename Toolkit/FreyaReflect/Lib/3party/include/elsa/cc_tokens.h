// cc_tokens.h
// do not edit; this file automatically generated by
//   make-token-files cc_tokens.tok gnu_ext.tok

#ifndef CC_TOKENS_H
#define CC_TOKENS_H

// token flags
enum TokenFlag {
  TF_MULTISPELL   = 0x01,     // token has multiple spellings
  TF_NONSEPARATOR = 0x02,     // token is a nonseparator
  TF_CPLUSPLUS    = 0x04,     // token is a keyword in C++, but an identifier in C
  ALL_TOKEN_FLAGS = 0x07      // bitwise OR of above
};

enum ElsaTokenType {
  TOK_EOF,

  // non-keyword name
  TOK_NAME,

  // classified name (for e.g. cdecl2)
  TOK_TYPE_NAME,
  TOK_VARIABLE_NAME,

  // literals
  TOK_INT_LITERAL,
  TOK_FLOAT_LITERAL,
  TOK_STRING_LITERAL,
  TOK_CHAR_LITERAL,

  // keywords
  TOK_ASM,
  TOK_AUTO,
  TOK_BREAK,
  TOK_BOOL,
  TOK_CASE,
  TOK_CATCH,
  TOK_CDECL,
  TOK_CHAR,
  TOK_CLASS,
  TOK_CONST,
  TOK_CONST_CAST,
  TOK_CONTINUE,
  TOK_DEFAULT,
  TOK_DELETE,
  TOK_DO,
  TOK_DOUBLE,
  TOK_DYNAMIC_CAST,
  TOK_ELSE,
  TOK_ENUM,
  TOK_EXPLICIT,
  TOK_EXPORT,
  TOK_EXTERN,
  TOK_FALSE,
  TOK_FLOAT,
  TOK_FOR,
  TOK_FRIEND,
  TOK_GOTO,
  TOK_IF,
  TOK_INLINE,
  TOK_INT,
  TOK_LONG,
  TOK_MUTABLE,
  TOK_NAMESPACE,
  TOK_NEW,
  TOK_OPERATOR,
  TOK_PASCAL,
  TOK_PRIVATE,
  TOK_PROTECTED,
  TOK_PUBLIC,
  TOK_REGISTER,
  TOK_REINTERPRET_CAST,
  TOK_RETURN,
  TOK_SHORT,
  TOK_SIGNED,
  TOK_SIZEOF,
  TOK_STATIC,
  TOK_STATIC_CAST,
  TOK_STRUCT,
  TOK_SWITCH,
  TOK_TEMPLATE,
  TOK_THIS,
  TOK_THROW,
  TOK_TRUE,
  TOK_TRY,
  TOK_TYPEDEF,
  TOK_TYPEID,
  TOK_TYPENAME,
  TOK_UNION,
  TOK_UNSIGNED,
  TOK_USING,
  TOK_VIRTUAL,
  TOK_VOID,
  TOK_VOLATILE,
  TOK_WCHAR_T,
  TOK_WHILE,

  // operators (I don't identify C++ operators because in C they're not identifiers)
  TOK_LPAREN,
  TOK_RPAREN,
  TOK_LBRACKET,
  TOK_RBRACKET,
  TOK_ARROW,
  TOK_COLONCOLON,
  TOK_DOT,
  TOK_BANG,
  TOK_TILDE,
  TOK_PLUS,
  TOK_MINUS,
  TOK_PLUSPLUS,
  TOK_MINUSMINUS,
  TOK_AND,
  TOK_STAR,
  TOK_DOTSTAR,
  TOK_ARROWSTAR,
  TOK_SLASH,
  TOK_PERCENT,
  TOK_LEFTSHIFT,
  TOK_RIGHTSHIFT,
  TOK_LESSTHAN,
  TOK_LESSEQ,
  TOK_GREATERTHAN,
  TOK_GREATEREQ,
  TOK_EQUALEQUAL,
  TOK_NOTEQUAL,
  TOK_XOR,
  TOK_OR,
  TOK_ANDAND,
  TOK_OROR,
  TOK_QUESTION,
  TOK_COLON,
  TOK_EQUAL,
  TOK_STAREQUAL,
  TOK_SLASHEQUAL,
  TOK_PERCENTEQUAL,
  TOK_PLUSEQUAL,
  TOK_MINUSEQUAL,
  TOK_ANDEQUAL,
  TOK_XOREQUAL,
  TOK_OREQUAL,
  TOK_LEFTSHIFTEQUAL,
  TOK_RIGHTSHIFTEQUAL,
  TOK_COMMA,
  TOK_ELLIPSIS,
  TOK_SEMICOLON,
  TOK_LBRACE,
  TOK_RBRACE,

  // dummy terminals used for precedence games
  TOK_PREFER_REDUCE,
  TOK_PREFER_SHIFT,

  // gnu_ext.tok  -*- c++ -*-
  // extension to cc_tokens.tok, for GNU language extensions

  // flags:
  //   MS(m): token has multiple spellings
  //   NS(n): token is a nonseparator; nonseparators cannot be adjacent
  //   CP(p): token is a keyword only in C++; in C it's an identifier

  // enumeration name      description                  : MS NS CP
  // ----------------      ---------------------------  : -- -- --

  // GNU extensions
  TOK_BUILTIN_CONSTANT_P,
  TOK___ALIGNOF__,
  TOK___OFFSETOF__,
  TOK___BUILTIN_OFFSETOF,
  TOK___ATTRIBUTE__,
  TOK___FUNCTION__,
  TOK___LABEL__,
  TOK___PRETTY_FUNCTION__,
  TOK___TYPEOF__,
  TOK___EXTENSION__,
  TOK___BUILTIN_EXPECT,

  // varargs; dsw: I think that we should make all of these their own
  // AST node, I just don't want to deal with the parsing ambiguity
  // with E_funCall right now
  // TOK___BUILTIN_VA_START,  "__builtin_va_start",        :    n
  // TOK___BUILTIN_VA_COPY,   "__builtin_va_copy",         :    n
  TOK___BUILTIN_VA_ARG,
  // TOK___BUILTIN_VA_END,    "__builtin_va_end",          :    n

  TOK_MIN_OP,
  TOK_MAX_OP,
  TOK_REAL,
  TOK_IMAG,

  // sm: these are C99 but I'm putting them here anyway..
  TOK_RESTRICT,
  TOK_COMPLEX,
  TOK_IMAGINARY,
  NUM_TOKEN_TYPES

};  // enum ElsaTokenType

// map ElsaTokenType to its spelling or description
extern char const * const tokenNameTable[];
extern int const tokenNameTableSize;

// map ElsaTokenType to a bitwise OR of TokenFlags
extern unsigned char tokenFlagTable[];

#endif // CC_TOKENS_H
